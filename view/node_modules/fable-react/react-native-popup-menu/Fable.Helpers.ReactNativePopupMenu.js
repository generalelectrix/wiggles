function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { createElement } from "react";
import { MenuOption, MenuOptions, MenuTrigger, MenuContext } from "react-native-popup-menu";
import react_native_popup_menu from "react-native-popup-menu";
export function menuContext(props, onBackdropPress, children) {
    return createElement.apply(undefined, [MenuContext, Object.assign({
        onBackdropPress: onBackdropPress
    }, props)].concat(_toConsumableArray(children)));
}
export function menu(props, onSelect, children) {
    return createElement.apply(undefined, [react_native_popup_menu, Object.assign({
        onSelect: onSelect
    }, props)].concat(_toConsumableArray(children)));
}
export function menuTrigger(props, onPress, children) {
    return createElement.apply(undefined, [MenuTrigger, Object.assign({
        onPress: onPress
    }, props)].concat(_toConsumableArray(children)));
}
export function menuOptions(props, children) {
    return createElement.apply(undefined, [MenuOptions, props].concat(_toConsumableArray(children)));
}
export function menuOption(props) {
    return createElement(MenuOption, props);
}
//# sourceMappingURL=Fable.Helpers.ReactNativePopupMenu.js.map