<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.React</name></assembly>
<members>
<member name="T:Fable.React.Internal.Emitter">
<summary>
 Only used internally to emit inline Fable AST
</summary>
</member>
<member name="M:Fable.Import.React.Component`2.setInitState(`1)">
<summary>
 This method can only be called in the constructor
</summary>
</member>
<member name="M:Fable.Helpers.React.opt(Microsoft.FSharp.Core.FSharpOption{Fable.Import.React.ReactElement})">
<summary>
 Cast an option value to a React element (erased in runtime)
</summary>
</member>
<member name="M:Fable.Helpers.React.str(System.String)">
<summary>
 Cast a string to a React element (erased in runtime)
</summary>
</member>
<member name="M:Fable.Helpers.React.svgEl``1(System.String,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Instantiate an SVG React element
</summary>
</member>
<member name="M:Fable.Helpers.React.domEl(System.String,Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.React.Props.IHTMLProp},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Instantiate a DOM React element
</summary>
</member>
<member name="M:Fable.Helpers.React.from``1(Fable.Import.React.ComponentClass{``0},``0,Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Instantiate an imported React component
</summary>
</member>
<member name="M:Fable.Helpers.React.fn``1(Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Import.React.ReactElement},``0,Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Instantiate a stateless component from a function
</summary>
</member>
<member name="M:Fable.Helpers.React.com``3(``1,Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Instantiate a React component from a type inheriting React.Component&lt;&gt;
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.openUrl(System.String)">
<summary>
 Opens the given URL
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Storage.save``1(System.String,``0)">
<summary>
 Saves a value with the given key to the local device storage.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Storage.setItem(System.String,System.String)">
<summary>
 Saves a value with the given key to the local device storage.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Storage.load``1(System.String)">
<summary>
 Loads a value with the given key from the local device storage.
 Returns None if the key is not found.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Storage.getItem(System.String)">
<summary>
 Loads a value as string with the given key from the local device storage.
 Returns None if the key is not found.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Toast.showLong(System.String)">
<summary>
 Shows a toast with long duration
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Toast.showShort(System.String)">
<summary>
 Shows a toast with short duration
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.ImageStore.addImageFromBase64``1(``0)">
<summary>
 Stores a base64-encoded image in the ImageStore, and returns a URI that can be used to access or display the image later.
 Images are stored in memory only, and must be manually deleted when you are finished with them by calling removeImageForTag().
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.ImageStore.getBase64ForTag``1(``0)">
<summary>
 Retrieves the base64-encoded data for an image in the ImageStore. If the specified URI does not match an image in the store, an exception will be raised.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNative.ImageStore">
<summary>
 ImageStore contains functions which help to deal with image data on the device.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Alert.alertWithTwoButtons(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Shows an alert button with two buttons
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Alert.alertWithOneButton(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Shows an alert button with one button
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Alert.alert(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Shows an alert with many buttons
</summary>
</member>
<member name="M:Fable.Helpers.ReactNative.Keyboard.dismiss">
<summary>
 Dismisses the keyboard
</summary>
</member>
<member name="T:Fable.Helpers.ReactNative.Props.KeyboardType.AsciiCapable">
<summary>
 only iOS
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.KeyValueStore.getAllKeys">
<summary>
 Retrieves all keys from the AsyncStorage.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.count``1">
<summary>
 Gets the row count from the model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.getAllWithKey``1(System.String)">
<summary>
 Gets all rows from the model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.getAll``1">
<summary>
 Gets all rows from the model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.get``1(System.Int32)">
<summary>
 Gets a row from the model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.replace``1(``0[])">
<summary>
 Replaces all rows of a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.replaceWithKey``1(System.String,``0[])">
<summary>
 Replaces all rows of a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.addMultiple``1(``0[])">
<summary>
 Adds multiple rows to a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.updateWithFunctionAndKey``1(Microsoft.FSharp.Core.FSharpFunc{``0[],``0[]},System.String)">
<summary>
  Update data by an update function.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.updateWithFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0[],``0[]})">
<summary>
  Update data by an update function.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.updateMultiple``1(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,``0}})">
<summary>
 Updates multiple rows in a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.delete``1(System.Int32)">
<summary>
 Deletes a row from a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.update``1(System.Int32,``0)">
<summary>
 Updates a row in a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.add``1(``0)">
<summary>
 Adds a row to a model
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.getModel``1(System.String)">
<summary>
 Gets or creates a new model.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeSimpleStore.DB.clear``1">
<summary>
 Removes all rows from the model.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeImageResizer.ImageResizer.createResizedImage(System.String,System.Int32,System.Int32,System.String,System.Int32)">
 <summary>Creates a scaled version of a local images.</summary>
 <param name="path">Path of image file, or a base64 encoded image string prefixed with 'data:image/imagetype' where imagetype is jpeg or png.</param>
 <param name="maxWidth">Image max width (ratio is preserved)</param>
 <param name="maxHeight">Image max height (ratio is preserved)</param>
 <param name="compressFormat">Can be either JPEG, PNG or WEBP (Android only).</param>
 <param name="quality">A number between 0 and 100. Used for the JPEG compression.</param>
</member>
<member name="T:Fable.Helpers.ReactNativeImageResizer.ImageResizer">
<summary>
 A React Native module that can create scaled versions of local images (also supports the assets library on iOS).
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.postP2PNotification``2(``0,``1,System.String)">
<summary>
 Post Peer-to-Peer-Notfication.
 Allows you to send notifications from user to user or schedule ones in the future to be delivered to the current device.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.cancelNotification(System.String)">
<summary>
 Cancels a single OneSignal notification based on its Android notification integer id. (Android Only)
 You can get the notification Id when invoking OneSignal.onNotificationOpened while receiving a notification.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.clearOneSignalNotifications">
<summary>
 Removes all OneSignal notifications from the Notification Shade. (Android Only)
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.promptLocation">
<summary>
 Prompts the user for location permissions. (Android Only)
 This allows for geotagging so you can send notifications to users based on location.
 Note: Make sure you also have the required location permission in your AndroidManifest.xml.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.disableSubscriptions">
<summary>
 Disables subscriptions.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.enableSubscriptions">
<summary>
 Enables subscriptions.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.disableVibrate">
<summary>
 Disables vibration.
 You can call this from your UI from a button press for example to give your user&apos;s options for your notifications.
 By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.
 Disabling vinrations means that the device will only vibrate lightly when the device is in it&apos;s vibrate only mode.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.enableVibrate">
<summary>
 Enables vibration.
 You can call this from your UI from a button press for example to give your user&apos;s options for your notifications.
 By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.
 Disabling vinrations means that the device will only vibrate lightly when the device is in it&apos;s vibrate only mode.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.disableSound">
<summary>
 Disables sound.
 You can call this from your UI from a button press for example to give your user&apos;s options for your notifications.
 By default OneSignal plays the system&apos;s default notification sound when the device&apos;s notification system volume is turned on.
 Disabling sounds means that the device will only vibrate unless the device is set to a total silent mode.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.enableSound">
<summary>
 Enables sound.
 You can call this from your UI from a button press for example to give your user&apos;s options for your notifications.
 By default OneSignal plays the system&apos;s default notification sound when the device&apos;s notification system volume is turned on.
 Disabling sounds means that the device will only vibrate unless the device is set to a total silent mode.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.disableNotificationsWhenActive">
<summary>
 Disables notifications when App is active.
 By default this is false and notifications will not be shown when the user is in your app, instead the NotificationOpenedHandler is fired.
 If activated notifications will always show in the notification area and NotificationOpenedHandler will not fire until the user taps on the notification.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.enableNotificationsWhenActive">
<summary>
 Enables notifications when App is active.
 By default this is false and notifications will not be shown when the user is in your app, instead the NotificationOpenedHandler is fired.
 If activated notifications will always show in the notification area and NotificationOpenedHandler will not fire until the user taps on the notification.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.disableInAppAlertNotification">
<summary>
 Disables In-App alert notifications.
 By default this is false and notifications will not be shown when the user is in the app, instead the OneSignalHandleNotificationBlock is fired.
 If activated notifications will be shown as native alert boxes if a notification is received when the user is in your app.
 The OneSignalHandleNotificationBlock is then fired after the alert box is closed.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.enableInAppAlertNotification">
<summary>
 Enables In-App alert notifications.
 By default this is false and notifications will not be shown when the user is in the app, instead the OneSignalHandleNotificationBlock is fired.
 If activated notifications will be shown as native alert boxes if a notification is received when the user is in your app.
 The OneSignalHandleNotificationBlock is then fired after the alert box is closed.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeOneSignal.OneSignal.configure(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativeOneSignal.Props.IOneSignalOptions})">
<summary>
 Configures the push notification system.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativeOneSignal.OneSignal">
<summary>
 Contains functions for push notifications via OneSignal.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativeOneSignal.Props">
<summary>
 Contains properties for push notifications via OneSignal.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativeOneSignal">
<summary>
 Contains functions for push notifications via OneSignal.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativeBarcodeScanner.barcodeScanner(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativeBarcodeScanner.Props.IBarcodeScannerProperties},Microsoft.FSharp.Core.FSharpFunc{Fable.Helpers.ReactNativeBarcodeScanner.Barcode,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a BarcodeScanner element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePopupMenu.menuOption(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePopupMenu.Props.IMenuOptionProperties})">
<summary>
 Creates a MenuOption element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePopupMenu.menuOptions(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePopupMenu.Props.IMenuOptionsProperties},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Creates a MenuOptions element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePopupMenu.menuTrigger(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePopupMenu.Props.IMenuTriggerProperties},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Creates a MenuTrigger element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePopupMenu.menu(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePopupMenu.Props.IMenuProperties},Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Creates a Menu element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePopupMenu.menuContext(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePopupMenu.Props.IMenuContextProperties},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{Fable.Import.React.ReactElement})">
<summary>
 Creates a MenuContext element
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.cancelAllLocalNotifications">
<summary>
 Cancels all scheduled notifications and clears the notifications alerts that are in the notification centre.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.cancelLocalNotifications(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePushNotification.Props.ILocalPushNotificationProperties})">
<summary>
 Cancels a local Push Notification.
 The the details parameter allows you to specify a userInfo dictionary that can be used to match one or more scheduled notifications.
 Each matched notification is cancelled and its alerts removed from the notification centre.

 Sample: PushNotification.cancelLocalNotifications [LocalPushNotificationProperties.Id &quot;123&quot;]
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.localNotificationSchedule(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePushNotification.Props.ILocalPushNotificationProperties},System.DateTime,System.String)">
<summary>
 Schedules a local push notification.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.localNotification(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePushNotification.Props.ILocalPushNotificationProperties},System.String)">
<summary>
 Sends a local push notification.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.setApplicationIconBadgeNumber(System.Int32)">
<summary>
 Set the application badge icon number.
 Works natively in iOS and uses the ShortcutBadger on Android, and as such will not work on all Android devices.
</summary>
</member>
<member name="M:Fable.Helpers.ReactNativePushNotification.PushNotification.configure(Microsoft.FSharp.Collections.FSharpList{Fable.Helpers.ReactNativePushNotification.Props.IPushNotificationOptions})">
<summary>
 Configures the push notification system.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.PushNotification">
<summary>
 Contains functions for push notifications.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.Props.LocalPushNotificationProperties.RepeatType">
<summary>
 Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.Props.LocalPushNotificationProperties.Title">
<summary>
 The title of the message. For iOS this is only used in apple watch, the title will be the app name on other iOS devices.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.Props.LocalPushNotificationProperties.Vibration">
<summary>
 Vibration length in milliseconds, ignored if Vibrate = false. Default: 1000ms
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.Props.LocalPushNotificationProperties.Id">
<summary>
 Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification.Props">
<summary>
 Contains properties for push notifications.
</summary>
</member>
<member name="T:Fable.Helpers.ReactNativePushNotification">
<summary>
 Contains functions for push notifications.
</summary>
</member>
</members>
</doc>
