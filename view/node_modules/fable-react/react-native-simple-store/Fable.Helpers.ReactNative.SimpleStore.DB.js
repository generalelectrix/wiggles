import { getTypeFullName } from "fable-core/Reflection";
import { ofJsonWithTypeInfo, toJsonWithTypeInfo } from "fable-core/Serialize";
import { AsyncStorage } from "react-native";
import { Array as _Array } from "fable-core/Util";
import { mapIndexed } from "fable-core/Seq";
var modelsKey = "models/";
export function clear(_genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    var s = toJsonWithTypeInfo([]);
    return AsyncStorage.setItem(key, s);
}

function getModel(key, _genArgs) {
    return AsyncStorage.getItem(key).then(function (_arg1) {
        if (_arg1 == null) {
            return [];
        } else {
            return ofJsonWithTypeInfo(_arg1, {
                T: _Array(_genArgs.a)
            });
        }
    });
}

export function add(data, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        var newModel = toJsonWithTypeInfo([data].concat(model));
        return AsyncStorage.setItem(key, newModel);
    });
}
export function update(index, data, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        model[index] = data;
        var newModel = toJsonWithTypeInfo(model);
        return AsyncStorage.setItem(key, newModel);
    });
}

function _delete(index, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        var model_1 = Array.from(mapIndexed(function (i, x) {
            return [i, x];
        }, model)).filter(function (tupledArg) {
            return tupledArg[0] !== index;
        }).map(function (tuple) {
            return tuple[1];
        });
        var newModel = toJsonWithTypeInfo(model_1);
        return AsyncStorage.setItem(key, newModel);
    });
}

export { _delete as delete };
export function updateMultiple(values, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var forLoopVar = _step.value;
                model[forLoopVar[0]] = forLoopVar[1];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var newModel = toJsonWithTypeInfo(model);
        return AsyncStorage.setItem(key, newModel);
    });
}
export function updateWithFunction(updateF, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        var updated = updateF(model);
        var newModel = toJsonWithTypeInfo(updated);
        return AsyncStorage.setItem(key, newModel);
    });
}
export function updateWithFunctionAndKey(updateF, key, _genArgs) {
    var key_1 = "models/" + getTypeFullName(_genArgs.a) + "/" + key;
    return getModel(key_1, {
        a: _genArgs.a
    }).then(function (model) {
        var updated = updateF(model);
        var newModel = toJsonWithTypeInfo(updated);
        return AsyncStorage.setItem(key_1, newModel);
    });
}
export function addMultiple(data, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        var newModel = toJsonWithTypeInfo(data.concat(model));
        return AsyncStorage.setItem(key, newModel);
    });
}
export function replaceWithKey(key, data, _genArgs) {
    var modelKey = "models/" + getTypeFullName(_genArgs.a) + "/" + key;
    var newModel = toJsonWithTypeInfo(data);
    return AsyncStorage.setItem(modelKey, newModel);
}
export function replace(data, _genArgs) {
    var modelKey = "models/" + getTypeFullName(_genArgs.a);
    var newModel = toJsonWithTypeInfo(data);
    return AsyncStorage.setItem(modelKey, newModel);
}
export function get(index, _genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        return model[index];
    });
}
export function getAll(_genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    });
}
export function getAllWithKey(key, _genArgs) {
    var key_1 = "models/" + getTypeFullName(_genArgs.a) + "/" + key;
    return getModel(key_1, {
        a: _genArgs.a
    });
}
export function count(_genArgs) {
    var key = "models/" + getTypeFullName(_genArgs.a);
    return getModel(key, {
        a: _genArgs.a
    }).then(function (model) {
        return model.length;
    });
}
//# sourceMappingURL=Fable.Helpers.ReactNative.SimpleStore.DB.js.map