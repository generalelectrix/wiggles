var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { compareUnions, equalsUnions, Any } from "fable-core/Util";
import { createElement } from "react";
import { AsyncStorage, ToastAndroid, ImageStore as ImageStore_1, NetInfo as NetInfo_1, Alert as Alert_1, Keyboard as Keyboard_1, Linking, BackAndroid, NavigatorStatic, NavigationRootContainer, NavigationContainer, NavigationExperimental, Switch, StatusBar, SwipeableListView, ScrollView, TabBarIOS, StyleSheet, Navigator, ViewPagerAndroid, TouchableNativeFeedback, TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback, Modal, MapView, ListView, Image, SwitchIOS, SliderIOS, Slider, RefreshControl, ProgressViewIOS, ProgressBarAndroid, Picker, PickerIOS, DrawerLayoutAndroid, DatePickerIOS, ActivityIndicatorIOS, ActivityIndicator, SegmentedControlIOS, WebView, View, KeyboardAvoidingView, ToolbarAndroid, TextInput, Text as _Text } from "react-native";
import { Buffer } from "buffer";
import { map } from "fable-core/Seq";
import { ofArray } from "fable-core/List";
import { toJson, ofJson } from "fable-core/Serialize";
export var Props = function (__exports) {
    var ViewPropertiesIOS = __exports.ViewPropertiesIOS = function () {
        function ViewPropertiesIOS(caseName, fields) {
            _classCallCheck(this, ViewPropertiesIOS);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(ViewPropertiesIOS, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Helpers.ReactNative.Props.ViewPropertiesIOS",
                    interfaces: ["FSharpUnion", "System.IEquatable", "Fable.Helpers.ReactNative.Props.IViewPropertiesIOS"],
                    cases: {
                        AccessibilityTraits: [Any],
                        ShouldRasterizeIOS: ["boolean"]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return equalsUnions(this, other);
            }
        }]);

        return ViewPropertiesIOS;
    }();

    setType("Fable.Helpers.ReactNative.Props.ViewPropertiesIOS", ViewPropertiesIOS);

    var ViewPropertiesAndroid = __exports.ViewPropertiesAndroid = function () {
        function ViewPropertiesAndroid(caseName, fields) {
            _classCallCheck(this, ViewPropertiesAndroid);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(ViewPropertiesAndroid, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Helpers.ReactNative.Props.ViewPropertiesAndroid",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable", "Fable.Helpers.ReactNative.Props.IViewPropertiesAndroid"],
                    cases: {
                        AccessibilityComponentType: ["string"],
                        AccessibilityLiveRegion: ["string"],
                        Collapsable: ["boolean"],
                        ImportantForAccessibility: ["string"],
                        NeedsOffscreenAlphaCompositing: ["boolean"],
                        RenderToHardwareTextureAndroid: ["boolean"]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return equalsUnions(this, other);
            }
        }, {
            key: "CompareTo",
            value: function (other) {
                return compareUnions(this, other);
            }
        }]);

        return ViewPropertiesAndroid;
    }();

    setType("Fable.Helpers.ReactNative.Props.ViewPropertiesAndroid", ViewPropertiesAndroid);

    var MapViewRegion = __exports.MapViewRegion = function () {
        function MapViewRegion(caseName, fields) {
            _classCallCheck(this, MapViewRegion);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(MapViewRegion, [{
            key: _Symbol.reflection,
            value: function () {
                return {
                    type: "Fable.Helpers.ReactNative.Props.MapViewRegion",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        Latitude: ["number"],
                        LatitudeDelta: ["number"],
                        Longitude: ["number"],
                        LongitudeDelta: ["number"]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return equalsUnions(this, other);
            }
        }, {
            key: "CompareTo",
            value: function (other) {
                return compareUnions(this, other);
            }
        }]);

        return MapViewRegion;
    }();

    setType("Fable.Helpers.ReactNative.Props.MapViewRegion", MapViewRegion);
    return __exports;
}({});
export function text(props, text_1) {
    return createElement(_Text, props, text_1);
}
export function textInput(props, text_1) {
    return createElement(TextInput, props, text_1);
}
export function createToolbarAction(title, showStatus) {
    return {
        title: title,
        show: showStatus
    };
}
export function createToolbarActionWithIcon(title, icon, showStatus) {
    return {
        title: title,
        icon: icon,
        show: showStatus
    };
}
export function toolbarAndroid(props, onActionSelected) {
    return createElement(ToolbarAndroid, Object.assign({
        onActionSelected: onActionSelected
    }, props));
}
export function keyboardAvoidingView(props, children) {
    return createElement.apply(undefined, [KeyboardAvoidingView, props].concat(_toConsumableArray(children)));
}
export function view(props, children) {
    return createElement.apply(undefined, [View, props].concat(_toConsumableArray(children)));
}
export function webView(props) {
    return createElement(WebView, props);
}
export function segmentedControlIOS(props) {
    return createElement(SegmentedControlIOS, props);
}
export function activityIndicator(props) {
    return createElement(ActivityIndicator, props);
}
export function activityIndicatorIOS(props) {
    return createElement(ActivityIndicatorIOS, props);
}
export function datePickerIOS(props) {
    return createElement(DatePickerIOS, props);
}
export function drawerLayoutAndroid(props, renderNavigationView, children) {
    return createElement.apply(undefined, [DrawerLayoutAndroid, Object.assign({
        renderNavigationView: renderNavigationView
    }, props)].concat(_toConsumableArray(children)));
}
export function pickerIOSItem(props) {
    return createElement(PickerIOS.Item, props);
}
export function pickerItem(props) {
    return createElement(Picker.Item, props);
}
export function picker(props, children) {
    return createElement.apply(undefined, [Picker, props].concat(_toConsumableArray(children)));
}
export function pickerIOS(props, children) {
    return createElement.apply(undefined, [PickerIOS, props].concat(_toConsumableArray(children)));
}
export function progressBarAndroid(props) {
    return createElement(ProgressBarAndroid, props);
}
export function progressViewIOS(props) {
    return createElement(ProgressViewIOS, props);
}
export function refreshControl(props) {
    return createElement(RefreshControl, props);
}
export function slider(props) {
    return createElement(Slider, props);
}
export function sliderIOS(props) {
    return createElement(SliderIOS, props);
}
export function switchIOS(props) {
    return createElement(SwitchIOS, props);
}
export function image(props) {
    return createElement(Image, props);
}
export function imageWithChild(props, child) {
    return createElement(Image, props, child);
}
export function listView(dataSource, props) {
    return createElement(ListView, Object.assign({
        dataSource: dataSource
    }, props));
}
export function mapView(props, children) {
    return createElement.apply(undefined, [MapView, props].concat(_toConsumableArray(children)));
}
export function modal(props) {
    return createElement(Modal, props);
}
export function touchableWithoutFeedback(props, children) {
    return createElement.apply(undefined, [TouchableWithoutFeedback, props].concat(_toConsumableArray(children)));
}
export function touchableHighlight(props, children) {
    return createElement.apply(undefined, [TouchableHighlight, props].concat(_toConsumableArray(children)));
}
export function touchableHighlightWithChild(props, child) {
    return createElement(TouchableHighlight, props, child);
}
export function touchableOpacity(props, children) {
    return createElement.apply(undefined, [TouchableOpacity, props].concat(_toConsumableArray(children)));
}
export function touchableNativeFeedback(props, children) {
    return createElement.apply(undefined, [TouchableNativeFeedback, props].concat(_toConsumableArray(children)));
}
export function viewPagerAndroid(props, children) {
    return createElement.apply(undefined, [ViewPagerAndroid, props].concat(_toConsumableArray(children)));
}
export function navigator(props) {
    return createElement(Navigator, props);
}
export function styleSheet(props) {
    return createElement(StyleSheet, props);
}
export function tabBarItem(props) {
    return createElement(TabBarIOS.Item, props);
}
export function tabBarIOS(props) {
    return createElement(TabBarIOS, props);
}
export function scrollView(props, children) {
    return createElement.apply(undefined, [ScrollView, props].concat(_toConsumableArray(children)));
}
export function swipeableListView(props) {
    return createElement(SwipeableListView, props);
}
export function statusBar(props) {
    return createElement(StatusBar, props);
}

function _switch(props, onValueChange, value) {
    return createElement(Switch, Object.assign({
        onValueChange: onValueChange,
        value: value
    }, props));
}

export { _switch as switch };
export function navigationHeader(props, rendererProps) {
    return createElement(NavigationExperimental.Header, Object.assign(props, rendererProps));
}
export function navigationState(index, routes) {
    return {
        index: index,
        routes: Array.from(routes)
    };
}
export function navigationRoute(key, title) {
    return {
        key: key,
        title: title
    };
}
export function navigationCardStack(navigationState_1, renderScene, props) {
    return createElement(NavigationExperimental.CardStack, Object.assign({
        renderScene: renderScene,
        navigationState: navigationState_1
    }, props));
}
export function navigationContainer(props) {
    return createElement(NavigationContainer, props);
}
export function navigationRootContainer(props) {
    return createElement(NavigationRootContainer, props);
}
export function navigationBar(props) {
    return createElement(NavigatorStatic.NavigationBar, props);
}
export function breadcrumbNavigationBar(props) {
    return createElement(NavigatorStatic.BreadcrumbNavigationBar, props);
}
export function emptyDataSource() {
    return new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
            return r1 !== r2;
        }
    });
}
export function newDataSource(elements) {
    return emptyDataSource().cloneWithRows(elements);
}
export function updateDataSource(data, dataSource) {
    return dataSource.cloneWithRows(data);
}
export function encodeBase64(text_1) {
    return Buffer.from(text_1).toString("base64");
}
export function encodeAscii(text_1) {
    return Buffer.from(text_1).toString("ascii");
}
export function removeOnHardwareBackPressHandler(onHardwareBackPress) {
    BackAndroid.removeEventListener("hardwareBackPress", onHardwareBackPress);
}
export function setOnHardwareBackPressHandler(onHardwareBackPress) {
    BackAndroid.addEventListener("hardwareBackPress", onHardwareBackPress);
}
export function exitApp() {
    BackAndroid.exitApp(null);
}
export function openUrl(url) {
    Linking.openURL(url);
}
export var Keyboard = function (__exports) {
    var dismiss = __exports.dismiss = function () {
        Keyboard_1.dismiss(null);
    };

    return __exports;
}({});
export var Alert = function (__exports) {
    var createButton = function createButton(label, callback) {
        return {
            text: label,
            onPress: callback
        };
    };

    var alert = __exports.alert = function (title, message, buttons) {
        Alert_1.alert(title, message, Array.from(map(function (tupledArg) {
            return createButton(tupledArg[0], tupledArg[1]);
        }, buttons)));
    };

    var alertWithOneButton = __exports.alertWithOneButton = function (title, message, okText, onOk) {
        alert(title, message, ofArray([[okText, onOk]]));
    };

    var alertWithTwoButtons = __exports.alertWithTwoButtons = function (title, message, cancelText, onCancel, okText, onOk) {
        alert(title, message, ofArray([[cancelText, onCancel], [okText, onOk]]));
    };

    var confirm = __exports.confirm = function (title, message, cancelText, okText) {
        return new Promise(function (onSuccess, onError) {
            var onError_1 = function onError_1() {
                onError(new Error("Cancelled"));
            };

            alertWithTwoButtons(title, message, cancelText, onError_1, okText, onSuccess);
        });
    };

    return __exports;
}({});
export var NetInfo = function (__exports) {
    var getConnectionType = __exports.getConnectionType = function () {
        return NetInfo_1.fetch(null);
    };

    return __exports;
}({});
export var ImageStore = function (__exports) {
    var getBase64ForTag = __exports.getBase64ForTag = function (uri) {
        return new Promise(function (onSuccess, onError) {
            ImageStore_1.getBase64ForTag(uri, onSuccess, onError);
        });
    };

    var addImageFromBase64 = __exports.addImageFromBase64 = function (imageData) {
        return new Promise(function (onSuccess, onError) {
            ImageStore_1.addImageFromBase64(imageData, onSuccess, onError);
        });
    };

    return __exports;
}({});
export var Toast = function (__exports) {
    var showShort = __exports.showShort = function (message) {
        ToastAndroid.show(message, ToastAndroid.SHORT);
    };

    var showLong = __exports.showLong = function (message) {
        ToastAndroid.show(message, ToastAndroid.LONG);
    };

    return __exports;
}({});
export var Storage = function (__exports) {
    var getItem = __exports.getItem = function (key) {
        return AsyncStorage.getItem(key).then(function (_arg1) {
            if (_arg1 == null) {
                return null;
            } else {
                return _arg1;
            }
        });
    };

    var load = __exports.load = function (key, _genArgs) {
        return AsyncStorage.getItem(key).then(function (_arg1) {
            if (_arg1 == null) {
                return null;
            } else {
                return ofJson(_arg1, {
                    T: _genArgs.a
                });
            }
        });
    };

    var setItem = __exports.setItem = function (k, v) {
        return AsyncStorage.setItem(k, v);
    };

    var save = __exports.save = function (k, v, _genArgs) {
        return AsyncStorage.setItem(k, toJson(v));
    };

    return __exports;
}({});
//# sourceMappingURL=Fable.Helpers.ReactNative.js.map