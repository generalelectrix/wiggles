{"version":3,"sources":["../../react-native.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAc;AAAA;AAAA;AAAd;AAAA;AAAA;;AAGS,sCAEF;AAAA;AAAA;;AAAA,mCAAiB;AAAiC;AAAA;AAAA;AAAA;AAAiB,iCAAjB;AAAiB,6BAAjB;;AAAjC;AAAA;AAAA;AAAA;AAAoD,yBAApD,EAAjB;;AAAA;AAAA;AACuB,iBAHrB,MAIC;AAAA;AAAiE;;AAP3E;AAAG;;AAAH;AAAA;AAAA,mCAUG;AAAA;;AAAA,+BAAiB;AAAA;;AAAiC;AAAA;AAAa,yBAAb;;AAAjC;AAAA;AAAA;AAAA;AAAgD,qBAAhD,EAAjB;AAAiE;AAVpE;AAAA;AAAA,mCAaG;AAAA;;AAAA,+BAAiB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAkD,uDAAlD;AAAA;AAAA;AAAqE,qBAArE,EAAjB;AAAsF;AAbzF;AAAA;AAAA,mCAgBG;AAAA;AAAmB;AAhBtB;AAAA;AAAA;;AARF;AAAA;AAuBmB,KAvBnB;;AA+BA;AAMC,0DACA;AAAA;AAAA;AAAA;;AAEW;AAAA;AAAA,qDAEH;AAAA;AAAA,uCAAe;AAAgC;AAAA;AAAA,6BAAhC;AAAA;AAAA,yBAAf;AAAiE,qBAF9D,MAIH;AAAA,8CAAiB;AAAqB;AAAA;AAAA,6BAArB;AAAA;AAAA;AAAA;AAAA,yBAAjB;AACsC;AAL3B,iBAAR;AAAA;;AAMX;AAAkC,SATlC;;AAND;AAMgB,KANhB","file":"react-native.js","sourcesContent":["namespace Elmish.ReactNative\n\nopen System\nopen Fable.Import.React\nopen Fable.Core\nopen Elmish\n\nmodule Components =\n    type [<Pojo>] AppState = { \n        render : unit -> ReactElement\n        setState : AppState -> unit\n    }\n\n    let mutable appState = None\n\n    type App(props) as this =\n        inherit Component<obj,AppState>(props)\n        do\n            match appState with\n            | Some state ->\n                appState <- Some { state with AppState.setState = this.setInitState }\n                this.setInitState state\n            | _ -> failwith \"was Elmish.ReactNative.Program.withReactNative called?\"\n\n        member this.componentDidMount() =\n            appState <- Some { appState.Value with setState = this.setState }\n\n        member this.componentWillUnmount() =\n            appState <- Some { appState.Value with setState = ignore; render = this.state.render }\n\n        member this.render () = \n            this.state.render()\n\n[<Import(\"AppRegistry\",\"react-native\")>] \ntype AppRegistry =\n    static member registerComponent(appKey:string, getComponentFunc:unit->ComponentClass<_>) : unit = failwith \"JS only\"\n\n[<RequireQualifiedAccess>]\nmodule Program =\n    open Fable.Core.JsInterop\n    open Elmish.React\n    open Components\n\n    /// Setup rendering of root ReactNative component\n    let withReactNative appKey (program:Program<_,_,_,_>) =\n        AppRegistry.registerComponent(appKey, fun () -> unbox typeof<App>)\n        let render m d =\n             match appState with\n             | Some state -> \n                state.setState { state with render = fun () -> program.view m d }\n             | _ -> \n                appState <- Some { render = fun () -> program.view m d \n                                   setState = ignore }\n        { program with setState = render }\n"]}