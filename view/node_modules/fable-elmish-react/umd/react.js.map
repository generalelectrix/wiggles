{"version":3,"sources":["../../react.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAaoB;AAAA;;AAER;AAAA;AAAM,yCACM;AAAA;AAAA;AAA6B;;AAGzC,8BAAqB,6BAAkC;AAAA,0CAE/C,6BAA0B;AAAA;AAAA;AAAA;AAAA,qBAA1B,gCAF+C,EAG/C,sCAH+C;AAAC,iBAAnC,CAArB;AAIO,aARP;AAAA;;AAUJ;AAZuB","file":"react.js","sourcesContent":["namespace Elmish.React\n\nopen System\nopen Fable.Import.React\nopen Fable.Core\n\n[<RequireQualifiedAccess>]\nmodule Program =\n    open Fable.Import.Browser\n    module R = Fable.Helpers.React\n\n    /// Setup rendering of root React component inside html element identified by placeholderId\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        let mutable lastRequest = None\n        let setState model dispatch =\n            match lastRequest with\n            | Some r -> window.cancelAnimationFrame r\n            | _ -> ()\n\n            lastRequest <- Some (window.requestAnimationFrame (fun _ -> \n                Fable.Import.ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) program.view model dispatch,\n                    document.getElementById(placeholderId)\n                )))\n\n        { program with setState = setState } \n"]}