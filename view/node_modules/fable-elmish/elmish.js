import _classCallCheck from "babel-runtime/helpers/classCallCheck";
import _createClass from "babel-runtime/helpers/createClass";
import { append, collect, map as map_1, ofArray } from "fable-core/List";
import List from "fable-core/List";
import { startImmediate, catchAsync } from "fable-core/Async";
import { singleton } from "fable-core/AsyncBuilder";
import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { start } from "fable-core/MailboxProcessor";
import { iterate } from "fable-core/Seq";
export var CmdModule = function (__exports) {
    var none = __exports.none = function () {
        return new List();
    };

    var ofMsg = __exports.ofMsg = function (msg) {
        return ofArray([function (dispatch) {
            dispatch(msg);
        }]);
    };

    var map = __exports.map = function (f, cmd) {
        return map_1(function (g) {
            return function ($var2) {
                return g(function (post) {
                    return function ($var1) {
                        return post(f($var1));
                    };
                }($var2));
            };
        }, cmd);
    };

    var batch = __exports.batch = function (cmds) {
        return collect(function (x) {
            return x;
        }, cmds);
    };

    var ofAsync = __exports.ofAsync = function (task, arg, ofSuccess, ofError) {
        var bind = function bind(dispatch) {
            return function (builder_) {
                return builder_.Delay(function () {
                    return builder_.Bind(catchAsync(task(arg)), function (_arg1) {
                        dispatch(_arg1.Case === "Choice2Of2" ? ofError(_arg1.Fields[0]) : ofSuccess(_arg1.Fields[0]));
                        return builder_.Zero();
                    });
                });
            }(singleton);
        };

        return ofArray([function ($var3) {
            return function (arg00) {
                startImmediate(arg00);
            }(bind($var3));
        }]);
    };

    var ofFunc = __exports.ofFunc = function (task, arg, ofSuccess, ofError) {
        var bind = function bind(dispatch) {
            try {
                (function ($var4) {
                    return dispatch(ofSuccess($var4));
                })(task(arg));
            } catch (x) {
                (function ($var5) {
                    return dispatch(ofError($var5));
                })(x);
            }
        };

        return ofArray([bind]);
    };

    var ofSub = __exports.ofSub = function (sub) {
        return ofArray([sub]);
    };

    var ofPromise = __exports.ofPromise = function (task, arg, ofSuccess, ofError) {
        var bind = function bind(dispatch) {
            task(arg).then(function ($var7) {
                return dispatch(ofSuccess($var7));
            }).catch(function ($var6) {
                return dispatch(ofError($var6));
            });
        };

        return ofArray([bind]);
    };

    return __exports;
}({});
export var Program = function () {
    function Program(init, update, subscribe, view, setState, onError) {
        _classCallCheck(this, Program);

        this.init = init;
        this.update = update;
        this.subscribe = subscribe;
        this.view = view;
        this.setState = setState;
        this.onError = onError;
    }

    _createClass(Program, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Elmish.Program",
                interfaces: ["FSharpRecord"],
                properties: {
                    init: "function",
                    update: "function",
                    subscribe: "function",
                    view: "function",
                    setState: "function",
                    onError: "function"
                }
            };
        }
    }]);

    return Program;
}();
setType("Elmish.Program", Program);
export var ProgramModule = function (__exports) {
    var onError = __exports.onError = function (text, ex) {
        console.error(text, ex);
    };

    var mkProgram = __exports.mkProgram = function (init, update, view) {
        var setState = function setState(model) {
            return function ($var8) {
                return function (value) {
                    value;
                }(view(model)($var8));
            };
        };

        return new Program(init, update, function (_arg1) {
            return CmdModule.none();
        }, view, setState, function (tupledArg) {
            onError(tupledArg[0], tupledArg[1]);
        });
    };

    var mkSimple = __exports.mkSimple = function (init, update, view) {
        var init_1 = function init_1($var9) {
            return function (state) {
                return [state, CmdModule.none()];
            }(init($var9));
        };

        var update_1 = function update_1(msg) {
            return function ($var10) {
                return function (state) {
                    return [state, CmdModule.none()];
                }(update(msg)($var10));
            };
        };

        var setState = function setState(model) {
            return function ($var11) {
                return function (value) {
                    value;
                }(view(model)($var11));
            };
        };

        return new Program(init_1, update_1, function (_arg1) {
            return CmdModule.none();
        }, view, setState, function (tupledArg) {
            onError(tupledArg[0], tupledArg[1]);
        });
    };

    var withSubscription = __exports.withSubscription = function (subscribe, program) {
        return new Program(program.init, program.update, subscribe, program.view, program.setState, program.onError);
    };

    var withConsoleTrace = __exports.withConsoleTrace = function (program) {
        var trace = function trace(text) {
            return function (msg) {
                return function (model) {
                    console.log(text, model, msg);
                    return program.update(msg)(model);
                };
            };
        };

        var update = trace("Updating:");
        return new Program(program.init, update, program.subscribe, program.view, program.setState, program.onError);
    };

    var withTrace = __exports.withTrace = function (program, trace) {
        var update = function update(msg) {
            return function (model) {
                trace(msg)(model);
                return program.update(msg)(model);
            };
        };

        return new Program(program.init, update, program.subscribe, program.view, program.setState, program.onError);
    };

    var runWith = __exports.runWith = function (arg, program) {
        var patternInput = program.init(arg);
        var inbox = start(function (mb) {
            var loop = function loop(state) {
                return function (builder_) {
                    return builder_.Delay(function () {
                        return builder_.Bind(mb.receive(), function (_arg1) {
                            return builder_.TryWith(builder_.Delay(function () {
                                var patternInput_1 = program.update(_arg1)(state);
                                program.setState(patternInput_1[0])(function (arg00) {
                                    mb.post(arg00);
                                });
                                iterate(function (sub) {
                                    sub(function (arg00) {
                                        mb.post(arg00);
                                    });
                                }, patternInput_1[1]);
                                return builder_.ReturnFrom(loop(patternInput_1[0]));
                            }), function (_arg2) {
                                program.onError(["Unable to process a message:", _arg2]);
                                return builder_.ReturnFrom(loop(state));
                            });
                        });
                    });
                }(singleton);
            };

            return loop(patternInput[0]);
        });
        program.setState(patternInput[0])(function (arg00) {
            inbox.post(arg00);
        });
        iterate(function (sub) {
            sub(function (arg00) {
                inbox.post(arg00);
            });
        }, append(program.subscribe(patternInput[0]), patternInput[1]));
    };

    var run = __exports.run = function (program) {
        runWith(null, program);
    };

    return __exports;
}({});
//# sourceMappingURL=elmish.js.map