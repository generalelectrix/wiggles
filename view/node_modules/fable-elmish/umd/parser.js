(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "babel-runtime/helpers/typeof", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/createClass", "fable-core/umd/Symbol", "fable-core/umd/Util", "fable-core/umd/List", "./result", "fable-core/umd/String"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("babel-runtime/helpers/typeof"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("fable-core/umd/Symbol"), require("fable-core/umd/Util"), require("fable-core/umd/List"), require("./result"), require("fable-core/umd/String"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global._typeof, global.classCallCheck, global.createClass, global.Symbol, global.Util, global.List, global.result, global.String);
        global.parser = mod.exports;
    }
})(this, function (exports, _typeof2, _classCallCheck2, _createClass2, _Symbol2, _Util, _List, _result, _String) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Chunks = undefined;
    exports.parse = parse;
    exports.s = s;
    exports.custom = custom;
    exports.str = str;
    exports.i32 = i32;
    exports.op_LessDivideGreater = op_LessDivideGreater;
    exports.oneOf = oneOf;
    exports.format = format;

    var _typeof3 = _interopRequireDefault(_typeof2);

    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

    var _createClass3 = _interopRequireDefault(_createClass2);

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    var _List2 = _interopRequireDefault(_List);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var Chunks = exports.Chunks = function () {
        function Chunks(seen, rest) {
            (0, _classCallCheck3.default)(this, Chunks);
            this.seen = seen;
            this.rest = rest;
        }

        (0, _createClass3.default)(Chunks, [{
            key: _Symbol3.default.reflection,
            value: function () {
                return {
                    type: "Elmish.UrlParser.Chunks",
                    interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                    properties: {
                        seen: (0, _Util.makeGeneric)(_List2.default, {
                            T: "string"
                        }),
                        rest: (0, _Util.makeGeneric)(_List2.default, {
                            T: "string"
                        })
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return (0, _Util.equalsRecords)(this, other);
            }
        }, {
            key: "CompareTo",
            value: function (other) {
                return (0, _Util.compareRecords)(this, other);
            }
        }]);
        return Chunks;
    }();

    (0, _Symbol2.setType)("Elmish.UrlParser.Chunks", Chunks);

    function parse(input, actuallyParse, url) {
        return function (_arg1) {
            if (_arg1.Case === "Ok") {
                var _ret = function () {
                    var result = _arg1.Fields[0][1];
                    var rest = _arg1.Fields[0][0].rest;

                    var _target2 = function _target2() {
                        return new _result.Result("Error", ["The parser worked, but /" + (0, _String.join)("/", rest) + " was left over."]);
                    };

                    if (rest.tail != null) {
                        if (rest.head === "") {
                            if (rest.tail.tail == null) {
                                return {
                                    v: new _result.Result("Ok", [result])
                                };
                            } else {
                                return {
                                    v: _target2()
                                };
                            }
                        } else {
                            return {
                                v: _target2()
                            };
                        }
                    } else {
                        return {
                            v: new _result.Result("Ok", [result])
                        };
                    }
                }();

                if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
            } else {
                return new _result.Result("Error", [_arg1.Fields[0]]);
            }
        }(actuallyParse(new Chunks(new _List2.default(), (0, _List.ofArray)((0, _String.split)(url, "/"))))(input));
    }

    function s(str, _arg1, result) {
        if (_arg1.rest.tail != null) {
            if (_arg1.rest.head === str) {
                return new _result.Result("Ok", [[new Chunks(new _List2.default(_arg1.rest.head, _arg1.seen), _arg1.rest.tail), result]]);
            } else {
                return new _result.Result("Error", ["Wanted /" + str + " but got /" + (0, _String.join)("/", _arg1.rest)]);
            }
        } else {
            return new _result.Result("Error", ["Got to the end of the URL but wanted /" + str]);
        }
    }

    function custom(tipe, stringToSomething, _arg1, fmt) {
        if (_arg1.rest.tail != null) {
            var matchValue = stringToSomething(_arg1.rest.head);

            if (matchValue.Case === "Error") {
                return new _result.Result("Error", ["Parsing `" + _arg1.rest.head + "` went wrong: " + matchValue.Fields[0]]);
            } else {
                return new _result.Result("Ok", [[new Chunks(new _List2.default(_arg1.rest.head, _arg1.seen), _arg1.rest.tail), fmt(matchValue.Fields[0])]]);
            }
        } else {
            return new _result.Result("Error", ["Got to the end of the URL but wanted /" + tipe]);
        }
    }

    function str(chunks) {
        var tipe = "string";

        var stringToSomething = function stringToSomething(arg0) {
            return new _result.Result("Ok", [arg0]);
        };

        return function (fmt) {
            return custom(tipe, stringToSomething, chunks, fmt);
        };
    }

    function i32(chunks) {
        var tipe = "i32";

        var stringToSomething = function stringToSomething($var13) {
            return new _result.Result("Ok", [$var13]);
        };

        return function (fmt) {
            return custom(tipe, stringToSomething, chunks, fmt);
        };
    }

    function op_LessDivideGreater(parseFirst, parseRest, chunks, fmt) {
        return _result.ResultModule.bind(function (tupledArg) {
            return parseRest(tupledArg[0])(tupledArg[1]);
        }, parseFirst(chunks)(fmt));
    }

    function oneOf(choices) {
        var oneOfHelp = function oneOfHelp(choices_1) {
            return function (chunks) {
                return function (formatter) {
                    if (choices_1.tail != null) {
                        var matchValue = choices_1.head(chunks)(formatter);

                        if (matchValue.Case === "Ok") {
                            return new _result.Result("Ok", [matchValue.Fields[0]]);
                        } else {
                            return oneOfHelp(choices_1.tail)(chunks)(formatter);
                        }
                    } else {
                        return new _result.Result("Error", ["Tried many parsers, but none of them worked!"]);
                    }
                };
            };
        };

        return oneOfHelp(choices);
    }

    function format(input, parse_1, chunks, fmt) {
        var matchValue = parse_1(chunks)(input);

        if (matchValue.Case === "Ok") {
            var value = matchValue.Fields[0][1];
            var newChunks = matchValue.Fields[0][0];
            return new _result.Result("Ok", [[newChunks, fmt(value)]]);
        } else {
            return new _result.Result("Error", [matchValue.Fields[0]]);
        }
    }
});
//# sourceMappingURL=parser.js.map