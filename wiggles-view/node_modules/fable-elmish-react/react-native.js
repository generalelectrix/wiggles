import _Object$getPrototypeOf from "babel-runtime/core-js/object/get-prototype-of";
import _classCallCheck from "babel-runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "babel-runtime/helpers/possibleConstructorReturn";
import _createClass from "babel-runtime/helpers/createClass";
import _inherits from "babel-runtime/helpers/inherits";
import { Component } from "react";
import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { extendInfo } from "fable-core/Util";
import { AppRegistry } from "react-native";
import { Program as Program_1 } from "fable-elmish/elmish";
export var Components = function (__exports) {
    var appState = (Object.defineProperty(__exports, 'appState', {
        get: function get() {
            return appState;
        },
        set: function set(x) {
            return appState = x;
        }
    }), null);

    var App = __exports.App = function (_Component) {
        _inherits(App, _Component);

        _createClass(App, [{
            key: _Symbol.reflection,
            value: function () {
                return extendInfo(App, {
                    type: "Elmish.ReactNative.Components.App",
                    interfaces: [],
                    properties: {}
                });
            }
        }]);

        function App(props) {
            var _this3 = this;

            _classCallCheck(this, App);

            var _this2 = _possibleConstructorReturn(this, (App.__proto__ || _Object$getPrototypeOf(App)).call(this, props));

            var _this = {
                contents: null
            };
            var _this_1 = _this2;
            _this2.contents = _this2;
            _this2["init@16"] = 1;

            if (appState != null) {
                (function () {
                    var state = appState;

                    appState = function () {
                        var setState = function () {
                            var objectArg = _this2.contents;
                            return function (arg00) {
                                _this3.state = arg00;
                            };
                        }();

                        return {
                            render: state.render,
                            setState: setState
                        };
                    }();

                    _this3.state = state;
                })();
            } else {
                throw new Error("was Elmish.ReactNative.Program.withReactNative called?");
            }

            return _this2;
        }

        _createClass(App, [{
            key: "componentDidMount",
            value: function () {
                var _this4 = this;

                appState = function () {
                    var inputRecord = appState;

                    var setState = function setState(arg00) {
                        _this4.setState(arg00);
                    };

                    return {
                        render: inputRecord.render,
                        setState: setState
                    };
                }();
            }
        }, {
            key: "componentWillUnmount",
            value: function () {
                var _this5 = this;

                appState = function () {
                    var inputRecord = appState;

                    var setState = function setState(value) {
                        value;
                    };

                    return {
                        render: _this5.state.render,
                        setState: setState
                    };
                }();
            }
        }, {
            key: "render",
            value: function () {
                return this.state.render(null);
            }
        }]);

        return App;
    }(Component);

    setType("Elmish.ReactNative.Components.App", App);
    return __exports;
}({});
export var Program = function (__exports) {
    var withReactNative = __exports.withReactNative = function (appKey, program) {
        AppRegistry.registerComponent(appKey, function () {
            return Components.App;
        });

        var render = function render(m) {
            return function (d) {
                if (Components.appState != null) {
                    var state = Components.appState;
                    state.setState({
                        render: function render() {
                            return program.view(m)(d);
                        },
                        setState: state.setState
                    });
                } else {
                    Components.appState = {
                        render: function render() {
                            return program.view(m)(d);
                        },
                        setState: function setState(value) {
                            value;
                        }
                    };
                }
            };
        };

        return new Program_1(program.init, program.update, program.subscribe, program.view, render, program.onError);
    };

    return __exports;
}({});
//# sourceMappingURL=react-native.js.map