import _Object$getPrototypeOf from "babel-runtime/core-js/object/get-prototype-of";
import _classCallCheck from "babel-runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "babel-runtime/helpers/possibleConstructorReturn";
import _createClass from "babel-runtime/helpers/createClass";
import _inherits from "babel-runtime/helpers/inherits";
import { createElement, Component } from "react";
import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { equals, extendInfo } from "fable-core/Util";
export var Components = function (__exports) {
    var LazyView = __exports.LazyView = function (_Component) {
        _inherits(LazyView, _Component);

        _createClass(LazyView, [{
            key: _Symbol.reflection,
            value: function () {
                return extendInfo(LazyView, {
                    type: "Elmish.React.Components.LazyView",
                    interfaces: [],
                    properties: {}
                });
            }
        }]);

        function LazyView(props) {
            _classCallCheck(this, LazyView);

            var _this = _possibleConstructorReturn(this, (LazyView.__proto__ || _Object$getPrototypeOf(LazyView)).call(this, props));

            return _this;
        }

        _createClass(LazyView, [{
            key: "shouldComponentUpdate",
            value: function (nextProps, nextState, nextContext) {
                return !this.props.equal(this.props.model)(nextProps.model);
            }
        }, {
            key: "render",
            value: function () {
                return this.props.render(null);
            }
        }]);

        return LazyView;
    }(Component);

    setType("Elmish.React.Components.LazyView", LazyView);
    return __exports;
}({});
export var Common = function (__exports) {
    var lazyViewWith = __exports.lazyViewWith = function (equal, view, state) {
        return createElement(Components.LazyView, function () {
            var render = function render() {
                return view(state);
            };

            return {
                model: state,
                render: render,
                equal: equal
            };
        }());
    };

    var lazyView2With = __exports.lazyView2With = function (equal, view, state, dispatch) {
        return createElement(Components.LazyView, function () {
            var render = function render() {
                return view(state)(dispatch);
            };

            return {
                model: state,
                render: render,
                equal: equal
            };
        }());
    };

    var lazyView3With = __exports.lazyView3With = function (equal, view, state1, state2, dispatch) {
        return createElement(Components.LazyView, function () {
            var render = function render() {
                return view(state1)(state2)(dispatch);
            };

            return {
                model: [state1, state2],
                render: render,
                equal: equal
            };
        }());
    };

    var lazyView = __exports.lazyView = function (view) {
        var equal = function equal(x) {
            return function (y) {
                return equals(x, y);
            };
        };

        return function (state) {
            return lazyViewWith(equal, view, state);
        };
    };

    var lazyView2 = __exports.lazyView2 = function (view) {
        var equal = function equal(x) {
            return function (y) {
                return equals(x, y);
            };
        };

        return function (state) {
            return function (dispatch) {
                return lazyView2With(equal, view, state, dispatch);
            };
        };
    };

    var lazyView3 = __exports.lazyView3 = function (view) {
        var equal = function equal(x) {
            return function (y) {
                return equals(x, y);
            };
        };

        return function (state1) {
            return function (state2) {
                return function (dispatch) {
                    return lazyView3With(equal, view, state1, state2, dispatch);
                };
            };
        };
    };

    return __exports;
}({});
//# sourceMappingURL=common.js.map