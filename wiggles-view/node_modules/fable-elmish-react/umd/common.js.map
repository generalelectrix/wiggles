{"version":3,"sources":["../../common.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcO;AACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAQ;;AAAR;AAAA;AAAA,oEAIG;AAAA,4BAAO,mDAAP;AAAG;AAJN;AAAA;AAAA,mCAOG;AAAA;AAAoB;AAPvB;AAAA;AAAA;;AADF;AAAA;AAOmB,KAPnB;;AAWA;AAKC,oDAGA;AAAA,kEACI;AAAqB;AAAA;AAAA;;AAArB;AAAA;AAAA;AAAA;AAAA;AAEiB,aAFjB,EADJ;AAIM,SAPN;;AAcA,sDAIA;AAAA,kEACI;AAAqB;AAAA;AAAA;;AAArB;AAAA;AAAA;AAAA;AAAA;AAEiB,aAFjB,EADJ;AAIM,SARN;;AAgBA,sDACA;AAAA,kEACI;AAAqB;AAAA;AAAA;;AAArB;AAAA;AAAA;AAAA;AAAA;AAE2B,aAF3B,EADJ;AAIM,SALN;;AASA,4CACA;AAAc;AAAA;AAAA;AAAA;AAAA;;AAAd;AAAA;AAAA;AAAqB,SADrB;;AAKA,8CACA;AAAe;AAAA;AAAA;AAAA;AAAA;;AAAf;AAAA;AAAA;AAAA;AAAA;AAAsB,SADtB;;AAKA,8CACA;AAAe;AAAA;AAAA;AAAA;AAAA;;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB,SADtB;;AAtDD;AAsDU,KAtDV","file":"common.js","sourcesContent":["namespace Elmish.React\n\nopen System\nopen Fable.Import.React\nopen Fable.Helpers.React\nopen Fable.Core\nopen Elmish\n\ntype [<Pojo>] LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        member this.shouldComponentUpdate(nextProps, nextState, nextContext) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        member this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function the compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        com<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function the compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        com<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function the compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        com<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n"]}