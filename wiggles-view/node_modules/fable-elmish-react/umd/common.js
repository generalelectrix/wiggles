(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "babel-runtime/core-js/object/get-prototype-of", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/possibleConstructorReturn", "babel-runtime/helpers/createClass", "babel-runtime/helpers/inherits", "react", "fable-core/umd/Symbol", "fable-core/umd/Util"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("babel-runtime/core-js/object/get-prototype-of"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/possibleConstructorReturn"), require("babel-runtime/helpers/createClass"), require("babel-runtime/helpers/inherits"), require("react"), require("fable-core/umd/Symbol"), require("fable-core/umd/Util"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.possibleConstructorReturn, global.createClass, global.inherits, global.react, global.Symbol, global.Util);
        global.common = mod.exports;
    }
})(this, function (exports, _getPrototypeOf, _classCallCheck2, _possibleConstructorReturn2, _createClass2, _inherits2, _react, _Symbol2, _Util) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Common = exports.Components = undefined;

    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

    var _createClass3 = _interopRequireDefault(_createClass2);

    var _inherits3 = _interopRequireDefault(_inherits2);

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var Components = exports.Components = function (__exports) {
        var LazyView = __exports.LazyView = function (_Component) {
            (0, _inherits3.default)(LazyView, _Component);
            (0, _createClass3.default)(LazyView, [{
                key: _Symbol3.default.reflection,
                value: function () {
                    return (0, _Util.extendInfo)(LazyView, {
                        type: "Elmish.React.Components.LazyView",
                        interfaces: [],
                        properties: {}
                    });
                }
            }]);

            function LazyView(props) {
                (0, _classCallCheck3.default)(this, LazyView);

                var _this = (0, _possibleConstructorReturn3.default)(this, (LazyView.__proto__ || (0, _getPrototypeOf2.default)(LazyView)).call(this, props));

                return _this;
            }

            (0, _createClass3.default)(LazyView, [{
                key: "shouldComponentUpdate",
                value: function (nextProps, nextState, nextContext) {
                    return !this.props.equal(this.props.model)(nextProps.model);
                }
            }, {
                key: "render",
                value: function () {
                    return this.props.render(null);
                }
            }]);
            return LazyView;
        }(_react.Component);

        (0, _Symbol2.setType)("Elmish.React.Components.LazyView", LazyView);
        return __exports;
    }({});

    var Common = exports.Common = function (__exports) {
        var lazyViewWith = __exports.lazyViewWith = function (equal, view, state) {
            return (0, _react.createElement)(Components.LazyView, function () {
                var render = function render() {
                    return view(state);
                };

                return {
                    model: state,
                    render: render,
                    equal: equal
                };
            }());
        };

        var lazyView2With = __exports.lazyView2With = function (equal, view, state, dispatch) {
            return (0, _react.createElement)(Components.LazyView, function () {
                var render = function render() {
                    return view(state)(dispatch);
                };

                return {
                    model: state,
                    render: render,
                    equal: equal
                };
            }());
        };

        var lazyView3With = __exports.lazyView3With = function (equal, view, state1, state2, dispatch) {
            return (0, _react.createElement)(Components.LazyView, function () {
                var render = function render() {
                    return view(state1)(state2)(dispatch);
                };

                return {
                    model: [state1, state2],
                    render: render,
                    equal: equal
                };
            }());
        };

        var lazyView = __exports.lazyView = function (view) {
            var equal = function equal(x) {
                return function (y) {
                    return (0, _Util.equals)(x, y);
                };
            };

            return function (state) {
                return lazyViewWith(equal, view, state);
            };
        };

        var lazyView2 = __exports.lazyView2 = function (view) {
            var equal = function equal(x) {
                return function (y) {
                    return (0, _Util.equals)(x, y);
                };
            };

            return function (state) {
                return function (dispatch) {
                    return lazyView2With(equal, view, state, dispatch);
                };
            };
        };

        var lazyView3 = __exports.lazyView3 = function (view) {
            var equal = function equal(x) {
                return function (y) {
                    return (0, _Util.equals)(x, y);
                };
            };

            return function (state1) {
                return function (state2) {
                    return function (dispatch) {
                        return lazyView3With(equal, view, state1, state2, dispatch);
                    };
                };
            };
        };

        return __exports;
    }({});
});
//# sourceMappingURL=common.js.map