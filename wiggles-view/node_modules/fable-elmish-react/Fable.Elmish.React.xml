<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.Elmish.React</name></assembly>
<members>
<member name="M:Elmish.React.Common.lazyView3``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Fable.Import.React.ReactElement}}})">
<summary>
 Avoid rendering the view unless the model has changed.
 view: function of three arguments to render the model using the dispatch
</summary>
</member>
<member name="M:Elmish.React.Common.lazyView2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit},Fable.Import.React.ReactElement}})">
<summary>
 Avoid rendering the view unless the model has changed.
 view: function of two arguments to render the model using the dispatch
</summary>
</member>
<member name="M:Elmish.React.Common.lazyView``1(Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Import.React.ReactElement})">
<summary>
 Avoid rendering the view unless the model has changed.
 view: function of model to render the view
</summary>
</member>
<member name="M:Elmish.React.Common.lazyView3With``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Fable.Import.React.ReactElement}}},``0,``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit})">
<summary>
 Avoid rendering the view unless the model has changed.
 equal: function the compare the previous and the new model (a tuple of two states)
 view: function to render the model using the dispatch
 state1: new state to render
 state2: new state to render
 dispatch: dispatch function
</summary>
</member>
<member name="M:Elmish.React.Common.lazyView2With``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit},Fable.Import.React.ReactElement}},``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit})">
<summary>
 Avoid rendering the view unless the model has changed.
 equal: function the compare the previous and the new states
 view: function to render the model using the dispatch
 state: new state to render
 dispatch: dispatch function
</summary>
</member>
<member name="M:Elmish.React.Common.lazyViewWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Import.React.ReactElement},``0)">
<summary>
 Avoid rendering the view unless the model has changed.
 equal: function the compare the previous and the new states
 view: function to render the model
 state: new state to render
</summary>
</member>
<member name="M:Elmish.React.Program.withReact``3(System.String,Elmish.Program{``0,``1,``2,Fable.Import.React.ReactElement})">
<summary>
 Setup rendering of root React component inside html element identified by placeholderId
</summary>
</member>
<member name="M:Elmish.ReactNative.Program.withReactNative``3(System.String,Elmish.Program{``0,``1,``2,Fable.Import.React.ReactElement})">
<summary>
 Setup rendering of root ReactNative component
</summary>
</member>
</members>
</doc>
