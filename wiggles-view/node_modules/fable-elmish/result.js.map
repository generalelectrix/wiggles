{"version":3,"sources":["../result.fs"],"names":[],"mappings":";;;;;AAEK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKE;AAEC,gCACA;AAAA;AAAI,KADJ;;AAGA,gCACM;AAAA,6BAEI;AAAA;AAAG,SAFP,MACO;AAAA;AAAO;AADb,KADP;;AAKA,8BACA;AAAA;AAAA,mBAAW;AAAA;AAAA,aAAX;AAAA;AAAgB,KADhB;;AAGA,kCACA;AAAA,oBAAe;AAAA;AAAA,SAAf;AAAyB,KADzB;;AAbD;AAaM,CAbN","file":"result.js","sourcesContent":["namespace Elmish\n\ntype Result<'s, 'f> =\n    | Ok of 's\n    | Error of 'f\n\n[<RequireQualifiedAccess>]\nmodule Result =\n\n    let unit (v: 't) : Result<'t, 'e> =\n        Ok v\n\n    let bind (f: 't -> Result<'u, 'e>) (r: Result<'t, 'e>) : Result<'u, 'e> =\n        match r with\n        | Error e -> Error e\n        | Ok v -> f v\n\n    let map (f: 't -> 'u) (r: Result<'t, 'e>) : Result<'u, 'e> =\n        bind (f >> Ok) r\n\n    let apply (a: Result<('t -> 'u), 'e>) (r: Result<'t, 'e>) : Result<'u, 'e> =\n        bind (fun f -> map f r) a \n\n"]}