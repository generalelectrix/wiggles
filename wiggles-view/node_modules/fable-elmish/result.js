import _classCallCheck from "babel-runtime/helpers/classCallCheck";
import _createClass from "babel-runtime/helpers/createClass";
import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { compareUnions, equalsUnions, GenericParam } from "fable-core/Util";
export var Result = function () {
    function Result(caseName, fields) {
        _classCallCheck(this, Result);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(Result, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Elmish.Result",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    Error: [GenericParam("f")],
                    Ok: [GenericParam("s")]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return Result;
}();
setType("Elmish.Result", Result);
export var ResultModule = function (__exports) {
    var unit = __exports.unit = function (v) {
        return new Result("Ok", [v]);
    };

    var bind = __exports.bind = function (f, r) {
        if (r.Case === "Ok") {
            return f(r.Fields[0]);
        } else {
            return new Result("Error", [r.Fields[0]]);
        }
    };

    var map = __exports.map = function (f, r) {
        return bind(function ($var12) {
            return function (arg0) {
                return new Result("Ok", [arg0]);
            }(f($var12));
        }, r);
    };

    var apply = __exports.apply = function (a, r) {
        return bind(function (f) {
            return map(f, r);
        }, a);
    };

    return __exports;
}({});
//# sourceMappingURL=result.js.map