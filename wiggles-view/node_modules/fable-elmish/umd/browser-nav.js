(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/createClass", "fable-core/umd/Symbol", "fable-core/umd/Util", "fable-core/umd/List", "./elmish"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("fable-core/umd/Symbol"), require("fable-core/umd/Util"), require("fable-core/umd/List"), require("./elmish"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.classCallCheck, global.createClass, global.Symbol, global.Util, global.List, global.elmish);
        global.browserNav = mod.exports;
    }
})(this, function (exports, _classCallCheck2, _createClass2, _Symbol2, _Util, _List, _elmish) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Program = exports.Navigation = exports.Navigable = undefined;

    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

    var _createClass3 = _interopRequireDefault(_createClass2);

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var Navigable = exports.Navigable = function () {
        function Navigable(caseName, fields) {
            (0, _classCallCheck3.default)(this, Navigable);
            this.Case = caseName;
            this.Fields = fields;
        }

        (0, _createClass3.default)(Navigable, [{
            key: _Symbol3.default.reflection,
            value: function () {
                return {
                    type: "Elmish.Browser.Navigation.Navigable",
                    interfaces: ["FSharpUnion", "System.IEquatable"],
                    cases: {
                        Change: [(0, _Util.Interface)("Fable.Import.Browser.Location")],
                        UserMsg: [(0, _Util.GenericParam)("msg")]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return (0, _Util.equalsUnions)(this, other);
            }
        }]);
        return Navigable;
    }();

    (0, _Symbol2.setType)("Elmish.Browser.Navigation.Navigable", Navigable);

    var Navigation = exports.Navigation = function (__exports) {
        var NavigatedEvent = __exports.NavigatedEvent = "NavigatedEvent";

        var modifyUrl = __exports.modifyUrl = function (newUrl) {
            return (0, _List.ofArray)([function (_arg1) {
                history.replaceState(null, "", newUrl);
            }]);
        };

        var newUrl = __exports.newUrl = function (newUrl_1) {
            return (0, _List.ofArray)([function (_arg1) {
                history.pushState(null, "", newUrl_1);
                var ev = document.createEvent('CustomEvent');
                ev.initCustomEvent("NavigatedEvent", true, true, {});
                window.dispatchEvent(ev);
            }]);
        };

        var jump = __exports.jump = function (n) {
            return (0, _List.ofArray)([function (_arg1) {
                history.go(n);
            }]);
        };

        return __exports;
    }({});

    var Program = exports.Program = function (__exports) {
        var toNavigable = __exports.toNavigable = function (parser, urlUpdate, program) {
            var map = function map(tupledArg) {
                return [tupledArg[0], _elmish.CmdModule.map(function (arg0) {
                    return new Navigable("UserMsg", [arg0]);
                }, tupledArg[1])];
            };

            var update = function update(msg) {
                return function (model) {
                    return map(msg.Case === "UserMsg" ? program.update(msg.Fields[0])(model) : urlUpdate(parser(msg.Fields[0]))(model));
                };
            };

            var locationChanges = function locationChanges(dispatch) {
                var lastLocation = null;

                var onChange = function onChange(_arg1) {
                    return function () {
                        var _target1 = function _target1() {
                            lastLocation = window.location.href;
                            dispatch(new Navigable("Change", [window.location]));
                        };

                        if (lastLocation != null) {
                            if (function () {
                                var href = lastLocation;
                                return href === window.location.href;
                            }()) {
                                var href = lastLocation;
                                return null;
                            } else {
                                return _target1();
                            }
                        } else {
                            return _target1();
                        }
                    }();
                };

                window.addEventListener('popstate', onChange);
                window.addEventListener('hashchange', onChange);
                window.addEventListener("NavigatedEvent", onChange);
            };

            var subs = function subs(model) {
                return _elmish.CmdModule.batch((0, _List.ofArray)([(0, _List.ofArray)([locationChanges]), _elmish.CmdModule.map(function (arg0) {
                    return new Navigable("UserMsg", [arg0]);
                }, program.subscribe(model))]));
            };

            var init = function init() {
                return map(program.init(parser(window.location)));
            };

            var setState = function setState(model) {
                return function (dispatch) {
                    program.setState(model)(function ($var14) {
                        return dispatch(function (arg0) {
                            return new Navigable("UserMsg", [arg0]);
                        }($var14));
                    });
                };
            };

            return new _elmish.Program(init, update, subs, function (model) {
                return function (dispatch) {
                    return program.view(model)(function ($var15) {
                        return dispatch(function (arg0) {
                            return new Navigable("UserMsg", [arg0]);
                        }($var15));
                    });
                };
            }, setState, program.onError);
        };

        return __exports;
    }({});
});
//# sourceMappingURL=browser-nav.js.map