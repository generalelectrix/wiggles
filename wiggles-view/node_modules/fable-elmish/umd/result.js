(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/createClass", "fable-core/umd/Symbol", "fable-core/umd/Util"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("fable-core/umd/Symbol"), require("fable-core/umd/Util"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.classCallCheck, global.createClass, global.Symbol, global.Util);
        global.result = mod.exports;
    }
})(this, function (exports, _classCallCheck2, _createClass2, _Symbol2, _Util) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ResultModule = exports.Result = undefined;

    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

    var _createClass3 = _interopRequireDefault(_createClass2);

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var Result = exports.Result = function () {
        function Result(caseName, fields) {
            (0, _classCallCheck3.default)(this, Result);
            this.Case = caseName;
            this.Fields = fields;
        }

        (0, _createClass3.default)(Result, [{
            key: _Symbol3.default.reflection,
            value: function () {
                return {
                    type: "Elmish.Result",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        Error: [(0, _Util.GenericParam)("f")],
                        Ok: [(0, _Util.GenericParam)("s")]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function (other) {
                return (0, _Util.equalsUnions)(this, other);
            }
        }, {
            key: "CompareTo",
            value: function (other) {
                return (0, _Util.compareUnions)(this, other);
            }
        }]);
        return Result;
    }();

    (0, _Symbol2.setType)("Elmish.Result", Result);

    var ResultModule = exports.ResultModule = function (__exports) {
        var unit = __exports.unit = function (v) {
            return new Result("Ok", [v]);
        };

        var bind = __exports.bind = function (f, r) {
            if (r.Case === "Ok") {
                return f(r.Fields[0]);
            } else {
                return new Result("Error", [r.Fields[0]]);
            }
        };

        var map = __exports.map = function (f, r) {
            return bind(function ($var12) {
                return function (arg0) {
                    return new Result("Ok", [arg0]);
                }(f($var12));
            }, r);
        };

        var apply = __exports.apply = function (a, r) {
            return bind(function (f) {
                return map(f, r);
            }, a);
        };

        return __exports;
    }({});
});
//# sourceMappingURL=result.js.map