import _classCallCheck from "babel-runtime/helpers/classCallCheck";
import _createClass from "babel-runtime/helpers/createClass";
import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { equalsUnions, GenericParam, Interface } from "fable-core/Util";
import { ofArray } from "fable-core/List";
import { Program as Program_1, CmdModule } from "./elmish";
export var Navigable = function () {
    function Navigable(caseName, fields) {
        _classCallCheck(this, Navigable);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(Navigable, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "Elmish.Browser.Navigation.Navigable",
                interfaces: ["FSharpUnion", "System.IEquatable"],
                cases: {
                    Change: [Interface("Fable.Import.Browser.Location")],
                    UserMsg: [GenericParam("msg")]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }]);

    return Navigable;
}();
setType("Elmish.Browser.Navigation.Navigable", Navigable);
export var Navigation = function (__exports) {
    var NavigatedEvent = __exports.NavigatedEvent = "NavigatedEvent";

    var modifyUrl = __exports.modifyUrl = function (newUrl) {
        return ofArray([function (_arg1) {
            history.replaceState(null, "", newUrl);
        }]);
    };

    var newUrl = __exports.newUrl = function (newUrl_1) {
        return ofArray([function (_arg1) {
            history.pushState(null, "", newUrl_1);
            var ev = document.createEvent('CustomEvent');
            ev.initCustomEvent("NavigatedEvent", true, true, {});
            window.dispatchEvent(ev);
        }]);
    };

    var jump = __exports.jump = function (n) {
        return ofArray([function (_arg1) {
            history.go(n);
        }]);
    };

    return __exports;
}({});
export var Program = function (__exports) {
    var toNavigable = __exports.toNavigable = function (parser, urlUpdate, program) {
        var map = function map(tupledArg) {
            return [tupledArg[0], CmdModule.map(function (arg0) {
                return new Navigable("UserMsg", [arg0]);
            }, tupledArg[1])];
        };

        var update = function update(msg) {
            return function (model) {
                return map(msg.Case === "UserMsg" ? program.update(msg.Fields[0])(model) : urlUpdate(parser(msg.Fields[0]))(model));
            };
        };

        var locationChanges = function locationChanges(dispatch) {
            var lastLocation = null;

            var onChange = function onChange(_arg1) {
                return function () {
                    var _target1 = function _target1() {
                        lastLocation = window.location.href;
                        dispatch(new Navigable("Change", [window.location]));
                    };

                    if (lastLocation != null) {
                        if (function () {
                            var href = lastLocation;
                            return href === window.location.href;
                        }()) {
                            var href = lastLocation;
                            return null;
                        } else {
                            return _target1();
                        }
                    } else {
                        return _target1();
                    }
                }();
            };

            window.addEventListener('popstate', onChange);
            window.addEventListener('hashchange', onChange);
            window.addEventListener("NavigatedEvent", onChange);
        };

        var subs = function subs(model) {
            return CmdModule.batch(ofArray([ofArray([locationChanges]), CmdModule.map(function (arg0) {
                return new Navigable("UserMsg", [arg0]);
            }, program.subscribe(model))]));
        };

        var init = function init() {
            return map(program.init(parser(window.location)));
        };

        var setState = function setState(model) {
            return function (dispatch) {
                program.setState(model)(function ($var14) {
                    return dispatch(function (arg0) {
                        return new Navigable("UserMsg", [arg0]);
                    }($var14));
                });
            };
        };

        return new Program_1(init, update, subs, function (model) {
            return function (dispatch) {
                return program.view(model)(function ($var15) {
                    return dispatch(function (arg0) {
                        return new Navigable("UserMsg", [arg0]);
                    }($var15));
                });
            };
        }, setState, program.onError);
    };

    return __exports;
}({});
//# sourceMappingURL=browser-nav.js.map