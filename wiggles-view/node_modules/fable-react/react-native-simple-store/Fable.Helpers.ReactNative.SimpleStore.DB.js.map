{"version":3,"sources":["..\\..\\src\\react-native-simple-store\\Fable.Helpers.ReactNative.SimpleStore.DB.fs"],"names":[],"mappings":";;;;;;AAiBqB,OACb;AAAM,0BAAY,2BAAZ;AACa;AALjB;AAIC;;AAOJ;AAAA,WADH,yBACG,MAAa;AAAA;AAAA;AAAA,eAEL;AAAA;AAAA;AAAA;AAAoB;AAAA,KAF5B;AAE6B;;AAGf,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACK;AAAyD,0CAArC,oBAAqC;AApB3D;AAoBU,KADb;AAFI;AAOU,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACC;AAAA;AACyB;AA7BvB;AA8BmB,KAHtB;AAFI;;AASH;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACK;AAIG,sBAFA;AAAA;AAAA,kBACA,QAAqB;AAAA;AAAA,SAArB,CACA,KAAU;AAAA;AAAA,SAAV;AACkB;AA1CvB;AAqCO,KADV;AAFI;;;AAYU,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACC;AAAA;AAAA;AAAA;;AAAA;AAAA,qKACI;AAAA;AAAA;AAA2B;AAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEyB;AApDvB;AAqDmB,KAJtB;AAFI;AASU,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACK;AAAU;AACU;AA7DtB;AA4DS,KADZ;AAFI;AAQU,OACb;AAAM,4BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACK;AAAU;AACU;AAtEtB;AAqES,KADZ;AAFI;AAQU,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MACK;AAA+C,0CAA3B,kBAA2B;AA9EjD;AA8EU,KADb;AAFI;AAOU,OACb;AAAW,+BAAY,2BAAZ;AACiB;AApF1B;AAmFM;AAKK,OACb;AAAW,+BAAY,2BAAZ;AACiB;AA1F1B;AAyFM;AAKK,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MAA0B;AAAA;AAAA,KAA1B;AAFI;AAKU,OACb;AAAM,0BAAY,2BAAZ;AACV;AAAA;AAAA;AADO;AAIU,OACb;AAAM,4BAAY,2BAAZ;AACV;AAAA;AAAA;AADO;AAIU,OACb;AAAM,0BAAY,2BAAZ;AAEP,WADH;AAAA;AAAA,MACG,MAA0B;AAAA;AAAA,KAA1B;AAFI","file":"Fable.Helpers.ReactNative.SimpleStore.DB.js","sourcesContent":["module Fable.Helpers.ReactNativeSimpleStore.DB\r\n\r\nopen System\r\nopen Fable.Import.ReactNative\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.PowerPack\r\n\r\n[<Literal>]\r\nlet private modelsKey = \"models/\"\r\ntype Table<'a> = 'a[]\r\n\r\nlet inline private setItem(key, s): JS.Promise<unit> =\r\n    unbox(Globals.AsyncStorage.setItem(key,s))\r\n\r\n/// Removes all rows from the model.\r\nlet [<PassGenerics>] clear<'a>() =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    let s:string = [||] |> toJsonWithTypeInfo\r\n    setItem(key,s)\r\n\r\n/// Gets or creates a new model.\r\nlet [<PassGenerics>] private getModel<'a> (key) : JS.Promise<Table<'a>> =\r\n    Globals.AsyncStorage.getItem (key)\r\n    |> Promise.map (function\r\n        | null -> [||]\r\n        | v -> ofJsonWithTypeInfo v)\r\n\r\n/// Adds a row to a model\r\nlet [<PassGenerics>] add<'a>(data:'a) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        let newModel : string = Array.append [|unbox data|] model |> toJsonWithTypeInfo\r\n        setItem(key,newModel))\r\n\r\n/// Updates a row in a model\r\nlet [<PassGenerics>] update<'a>(index, data:'a) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        model.[index] <- unbox data\r\n        let newModel : string =  toJsonWithTypeInfo model\r\n        setItem(key,newModel))\r\n\r\n/// Deletes a row from a model\r\nlet [<PassGenerics>] delete<'a>(index) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        let model : 'a[] =\r\n            model\r\n            |> Array.mapi (fun i x -> i,x)\r\n            |> Array.filter (fun (i,_) -> i <> index)\r\n            |> Array.map snd\r\n        let newModel : string =  toJsonWithTypeInfo model\r\n        setItem(key,newModel))\r\n\r\n/// Updates multiple rows in a model\r\nlet [<PassGenerics>] updateMultiple<'a>(values) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        for index, data:'a in values do\r\n            model.[index] <- unbox data\r\n        let newModel : string =  toJsonWithTypeInfo model\r\n        setItem(key,newModel))\r\n\r\n///  Update data by an update function.\r\nlet [<PassGenerics>] updateWithFunction<'a>(updateF: 'a[] -> 'a[]) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        let updated = updateF model\r\n        let newModel : string = toJsonWithTypeInfo updated\r\n        setItem(key,newModel))\r\n\r\n///  Update data by an update function.\r\nlet [<PassGenerics>] updateWithFunctionAndKey<'a>(updateF: 'a[] -> 'a[],key) =\r\n    let key = modelsKey + typeof<'a>.FullName + \"/\" + key\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        let updated = updateF model\r\n        let newModel : string = toJsonWithTypeInfo updated\r\n        setItem(key,newModel))\r\n\r\n/// Adds multiple rows to a model\r\nlet [<PassGenerics>] addMultiple<'a>(data:'a []) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.bind (fun model ->\r\n        let newModel : string = Array.append data model |> toJsonWithTypeInfo\r\n        setItem(key,newModel))\r\n\r\n/// Replaces all rows of a model\r\nlet [<PassGenerics>] replaceWithKey<'a>(key,data:'a []) =\r\n    let modelKey = modelsKey + typeof<'a>.FullName + \"/\" + key\r\n    let newModel : string = data |> toJsonWithTypeInfo\r\n    setItem(modelKey,newModel)\r\n\r\n/// Replaces all rows of a model\r\nlet [<PassGenerics>] replace<'a>(data:'a []) =\r\n    let modelKey = modelsKey + typeof<'a>.FullName\r\n    let newModel : string = data |> toJsonWithTypeInfo\r\n    setItem(modelKey,newModel)\r\n\r\n/// Gets a row from the model\r\nlet [<PassGenerics>] get<'a>(index:int) =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.map (fun model -> model.[index])\r\n\r\n/// Gets all rows from the model\r\nlet [<PassGenerics>] getAll<'a>() =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n\r\n/// Gets all rows from the model\r\nlet [<PassGenerics>] getAllWithKey<'a>(key) =\r\n    let key = modelsKey + typeof<'a>.FullName + \"/\" + key\r\n    getModel<'a> key\r\n\r\n/// Gets the row count from the model\r\nlet [<PassGenerics>] count<'a>() =\r\n    let key = modelsKey + typeof<'a>.FullName\r\n    getModel<'a> key\r\n    |> Promise.map (fun model -> model.Length)\r\n"]}