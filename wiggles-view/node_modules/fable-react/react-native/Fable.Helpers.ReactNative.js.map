{"version":3,"sources":["..\\..\\src\\react-native\\Fable.Helpers.ReactNative.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;AAaO;AAksBE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAlsBF;;AAusBE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAvsBF;;AA8kCE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA9kCF;AAAA;AA8kCe,CA9kCf;AA4/CH,OAFA;AAAA;AAA+B;AAK/B,OALA;AAAA;AAA+B;AAQ/B,OACA;AAAA;AAAA;AAAA;AAAA;AAGC;AAED,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC;AAED,OArBA;AAAA,yCAwBI,cACI;AAAA;AAAA,KADJ,QAxBJ;AAA+B;AA4B/B,OA5BA;AAAA;AAA+B;AAkC/B,OAlCA;AAAA;AAA+B;AAwC/B,OAxCA;AAAA;AAA+B;AA6C/B,OA7CA;AAAA;AAA+B;AAkD/B,OAlDA;AAAA;AAA+B;AAuD/B,OAvDA;AAAA;AAA+B;AA4D/B,OA5DA;AAAA;AAA+B;AAiE/B,OAjEA;AAAA,gEAoEE,cACM;AAAA;AAAA,KADN,QApEF;AAA+B;AAyE/B,OAzEA;AAAA;AAA+B;AA8E/B,OA9EA;AAAA;AAA+B;AAmF/B,OAnFA;AAAA;AAA+B;AAyF/B,OAzFA;AAAA;AAA+B;AA+F/B,OA/FA;AAAA;AAA+B;AAoG/B,OApGA;AAAA;AAA+B;AAyG/B,OAzGA;AAAA;AAA+B;AA8G/B,OA9GA;AAAA;AAA+B;AAmH/B,OAnHA;AAAA;AAA+B;AAwH/B,OAxHA;AAAA;AAA+B;AA6H/B,OA7HA;AAAA;AAA+B;AAkI/B,OAlIA;AAAA;AAA+B;AAwI/B,OAxIA;AAAA,mCA2II,cACI;AAAA;AAAA,KADJ,QA3IJ;AAA+B;AA+I/B,OA/IA;AAAA;AAA+B;AAqJ/B,OArJA;AAAA;AAA+B;AA0J/B,OA1JA;AAAA;AAA+B;AAgK/B,OAhKA;AAAA;AAA+B;AAsK/B,OAtKA;AAAA;AAA+B;AA4K/B,OA5KA;AAAA;AAA+B;AAkL/B,OAlLA;AAAA;AAA+B;AAwL/B,OAxLA;AAAA;AAA+B;AA8L/B,OA9LA;AAAA;AAA+B;AAmM/B,OAnMA;AAAA;AAA+B;AAwM/B,OAxMA;AAAA;AAA+B;AA6M/B,OA7MA;AAAA;AAA+B;AAkN/B,OAlNA;AAAA;AAA+B;AAwN/B,OAxNA;AAAA;AAA+B;AA6N/B,OA7NA;AAAA;AAA+B;;AAA/B;AAAA,iCAqOE,cACM;AAAA;AAAA;AAAA,KADN,QArOF;AAA+B;;;AA0O/B,OA1OA;AAAA,wDA6OE,mCA7OF;AAA+B;AA+O/B,OACA;AAAA;AAAA;AACwB;AADxB;AAC4C;AAG5C,OACA;AAAA;AAAA;AAAA;AAAA;AAC6B;AAG7B,OAzPA;AAAA,2DA8PE,cACM;AAAA;AAAA;AAAA,KADN,QA9PF;AAA+B;AAmQ/B,OAnQA;AAAA;AAA+B;AAwQ/B,OAxQA;AAAA;AAA+B;AA6Q/B,OA7QA;AAAA;AAA+B;AAkR/B,OAlRA;AAAA;AAA+B;AAuR/B,OACA;AAAA,mCACU;AAA4C;AAAA;AAAA;AAA5C,KADV;AAEC;AAED,OACA;AAAA;AAAmD;AAEnD,OACA;AAAA;AAAqC;AAYrC,OAAuC;AAAA;AAAqB;AAC5D,OAAsC;AAAA;AAAoB;AAK1D,OACA;AAAA;AAAyE;AAEzE,OACA;AAAA;AAAsE;AAEtE,OACA;AAAA;AAAqB;AAMrB,OACA;AAAA;AAAoB;AAGjB;AAKC,sCACA;AAAA;AAAkB,KADlB;;AALD;AAKQ,CALR;AAQA;AAIS,uBACR;AAAA;AAAA;AAAA;AAAA;AAGC,KAJO;;AAOR,kCACA;AAAA,sCAA6D,WAAhC,IAAQ;AAAA;AAAA,SAAR,UAAgC,CAA7D;AAA0E,KAD1E;;AAIA,4DACA;AAAA,8BAAuB,yBAAvB;AAAuC,KADvC;;AAIA,8DACA;AAAA,8BAAuB,iDAAvB;AAAgE,KADhE;;AAGA,sCACA;AAAA,2BACQ;AAAY;AAAA,wBAAQ,sBAAR;AAAmC,aAAnC;;AAChB;AADa,SADjB;AAGC,KAJD;;AAtBD;AAsBQ,CAtBR;AA4BA;AAOC,0DACA;AAAA;AAAe,KADf;;AAPD;AAOkB,CAPlB;AAWA;AAKC,sDACA;AAAA,2BACI;AAAA;AAAmD,SADvD;AAEC,KAHD;;AAOA,4DACA;AAAA,2BACI;AAAA;AAA4D,SADhE;AAEC,KAHD;;AAZD;AAYmB,CAZnB;AAiBA;AAKC,0CACA;AAAA;AAA+B,KAD/B;;AAIA,wCACA;AAAA;AAA8B,KAD9B;;AATD;AASS,CATT;AAYA;AAKC,sCAEG;AAAA,eADH,yBACG,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,SAFd;AAEe,KAJlB;;AAQiB,gCAEd;AAAA,eADH,yBACG,MAAa;AAAA;AAAA;AAAA,mBAEC;AAAA;AAAA;AAAA;AAAQ;AAAC,SAFvB;AAEwB,KAJV;;AAOjB,sCACM;AAAA;AAAiC,KADvC;;AAIiB,gCACX;AAAA,uCAAgC,SAAhC;AAAyC,KAD9B;;AAxBlB;AAwBsB,CAxBtB","file":"Fable.Helpers.ReactNative.js","sourcesContent":["module Fable.Helpers.ReactNative\r\n\r\nopen System\r\nopen Fable.Import.ReactNative\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.PowerPack\r\n\r\ntype RN = ReactNative.Globals\r\n\r\ntype Ref<'t> = ('t -> unit)\r\n\r\nmodule Props =\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ToolbarActionShowStatus =\r\n    | IfRoom\r\n    | Always\r\n    | Never\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Alignment =\r\n    | Auto\r\n    | [<CompiledName(\"flex-start\")>] FlexStart\r\n    | Center\r\n    | [<CompiledName(\"flex-end\")>] FlexEnd\r\n    | Stretch\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ItemAlignment =\r\n    | [<CompiledName(\"flex-start\")>] FlexStart\r\n    | Center\r\n    | [<CompiledName(\"flex-end\")>] FlexEnd\r\n    | Stretch\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type TextAlignment =\r\n    | Auto\r\n    | Default\r\n    | Left\r\n    | Center\r\n    | Right\r\n    | Justify\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type TextAlignVertical =\r\n    | Auto\r\n    | Top\r\n    | Bottom\r\n    | Center\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type JustifyContent =\r\n    | [<CompiledName(\"flex-start\")>] FlexStart\r\n    | Center\r\n    | [<CompiledName(\"flex-end\")>] FlexEnd\r\n    | [<CompiledName(\"space-between\")>] SpaceBetween\r\n    | [<CompiledName(\"space-around\")>] SpaceAround\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type FlexDirection =\r\n    | Row\r\n    | [<CompiledName(\"row-reverse\")>] RowReverse\r\n    | Column\r\n    | [<CompiledName(\"column-reverse\")>] ColumnReverse\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type FlexWrap =\r\n    | Row\r\n    | [<CompiledName(\"wrap\")>] Wrap\r\n    | Column\r\n    | [<CompiledName(\"nowrap\")>] NoWrap\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type KeyboardType =\r\n    | Default\r\n    | [<CompiledName(\"email-address\")>] EmailAddress\r\n    | Numeric\r\n    | [<CompiledName(\"phone-pad\")>] PhonePad\r\n    /// only iOS\r\n    | [<CompiledName(\"ascii-capable\")>] AsciiCapable\r\n    | [<CompiledName(\"numbers-and-punctuation\")>] NumbersAndPunctuation\r\n    | [<CompiledName(\"url\")>] Url\r\n    | [<CompiledName(\"number-pad\")>] NumberPad\r\n    | [<CompiledName(\"name-phone-pad\")>] NamePhonePad\r\n    | [<CompiledName(\"decimal-pad\")>] DecimalPad\r\n    | Twitter\r\n    | [<CompiledName(\"web-search\")>] WebSearch\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Position =\r\n    | Row\r\n    | [<CompiledName(\"absolute\")>] Absolute\r\n    | Column\r\n    | [<CompiledName(\"relative\")>] Relative\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ResizeMode =\r\n    | Contain\r\n    | Cover\r\n    | Stretch\r\n    | Conter\r\n    | Repeat\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ReturnKeyType =\r\n    | Done\r\n    | Go\r\n    | Next\r\n    | Search\r\n    | Send\r\n    | None\r\n    | Previous\r\n    | Default\r\n    | [<CompiledName(\"emergency-call\")>] EmergencyCall\r\n    | Google\r\n    | Join\r\n    | Route\r\n    | Yahoo\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AutoCapitalizeType =\r\n    | None\r\n    | Sentences\r\n    | Words\r\n    | Characters\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type KeyboardDismissMode  =\r\n    | None\r\n    | [<CompiledName(\"on-drag\")>] OnDrag\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type DrawerLockMode =\r\n    | Unlocked\r\n    | [<CompiledName(\"locked-closed\")>] LockedClosed\r\n    | [<CompiledName(\"locked-open\")>] LockedOpen\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AlignSelf =\r\n        | Auto\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type TextDecorationStyle =\r\n        | Solid | Double | Dotted | Dashed\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type FontStyle =\r\n        | Normal | Italic\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type WritingDirection =\r\n        | Auto | Ltr | Rtl\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ScrollState =\r\n        Idle | Dragging | Settling\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type FontWeight =\r\n        | Normal\r\n        | Bold\r\n        | [<CompiledName(\"100\")>] F100\r\n        | [<CompiledName(\"200\")>] F200\r\n        | [<CompiledName(\"300\")>] F300\r\n        | [<CompiledName(\"400\")>] F400\r\n        | [<CompiledName(\"500\")>] F500\r\n        | [<CompiledName(\"600\")>] F600\r\n        | [<CompiledName(\"700\")>] F700\r\n        | [<CompiledName(\"800\")>] F800\r\n        | [<CompiledName(\"900\")>] F900\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type TextDecorationLine =\r\n        | None | Underline\r\n        | ``Line-through``\r\n        | ``Underline line-through``\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type LineBreakMode =\r\n        | Head | Middle | Tail | Clip\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AutoCapitalize =\r\n        | None | Sentences | Words | Characters\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type BackfaceVisibility =\r\n        | Visible | Hidden\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type BorderStyle =\r\n        | Solid | Dotted | Dashed\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Overflow =\r\n        | Visible | Hidden\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Behavior =\r\n        | Height | Position | Padding\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type NavigationType =\r\n        | Other | Click\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Size =\r\n        | Small | Large\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Mode =\r\n        | Date | Time | Datetime\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type DatePickerIOSMode =\r\n        | Dialog | Dropdown\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type StyleAttr =\r\n        | Horizontal | Normal | Small | Large | Inverse | SmallInverse | LargeInverse\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ProgressViewStyle =\r\n        | Default | Bar\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AnimationType =\r\n        | None | Slide | Fade\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type SystemIcon =\r\n        | Bookmarks | Contacts | Downloads | Favorites | Featured | History | More | ``Most-recent`` | ``Most-viewed`` | Recents | Search | ``Top-rated``\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Dim =\r\n        | Window | Screen\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type IndicatorStyle =\r\n        | Default | Black | White\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type DecelerationRate =\r\n        | Fast | Normal\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AlertButtonStyle =\r\n        | Default | Cancel | Destructive\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type GroupTypes =\r\n        | Album | All | Event | Faces | Library | PhotoStream | SavedPhotos\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type AssetType =\r\n        | All | Videos | Photos\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type ShowHideTransition =\r\n        | Fade | Slide\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type Direction =\r\n        | Horizontal | Vertical\r\n\r\n    [<KeyValueList>]\r\n    type IStyle =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IScrollViewStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type ISwitchIOSStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type ITextStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type ITextStyleIOS =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type ITextStyleAndroid =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type IImageStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type ITransformsStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type IViewStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type IFlexStyle =\r\n        inherit IStyle\r\n\r\n    [<KeyValueList>]\r\n    type IGestureResponderHandlers =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IToolbarAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ISegmentedControlIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IWebViewProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IWebViewPropertiesAndroid =\r\n        inherit IWebViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type IWebViewPropertiesIOS =\r\n        inherit IWebViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type IDatePickerIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IDrawerLayoutAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IPickerProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IProgressBarAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IProgressViewIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IRefreshControlProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ISliderProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ISliderIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITabBarItemProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITabBarIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IListViewProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IScrollViewProperties =\r\n        inherit IListViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type IStatusBarProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ISwitchProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IKeyboardAvoidingViewProps =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IActivityIndicatorProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IActivityIndicatorIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IMapViewProperties  =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IMapViewPropertiesAndroid  =\r\n        inherit IMapViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type IViewPropertiesIOS =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IViewPropertiesAndroid =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IViewPagerAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IViewProperties =\r\n        inherit IViewPropertiesAndroid\r\n        inherit IViewPropertiesIOS\r\n        inherit IToolbarAndroidProperties\r\n        inherit IGestureResponderHandlers\r\n        inherit IViewPagerAndroidProperties\r\n        inherit IKeyboardAvoidingViewProps\r\n        inherit IWebViewProperties\r\n        inherit ISegmentedControlIOSProperties\r\n        inherit IActivityIndicatorProperties\r\n        inherit IActivityIndicatorIOSProperties\r\n        inherit IDatePickerIOSProperties\r\n        inherit IDrawerLayoutAndroidProperties\r\n        inherit IPickerProperties\r\n        inherit IProgressBarAndroidProperties\r\n        inherit IProgressViewIOSProperties\r\n        inherit IRefreshControlProperties\r\n        inherit ISliderProperties\r\n        inherit ISliderIOSProperties\r\n        inherit ITabBarItemProperties\r\n        inherit ITabBarIOSProperties\r\n        inherit IScrollViewProperties\r\n        inherit IStatusBarProperties\r\n        inherit ISwitchProperties\r\n        inherit IMapViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ITouchable =\r\n        inherit IScrollViewProperties\r\n        inherit IMapViewProperties\r\n        inherit IViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type TransformsStyle =\r\n        | Transform of obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj\r\n        | TransformMatrix of ResizeArray<float>\r\n        | Rotation of float\r\n        | ScaleX of float\r\n        | ScaleY of float\r\n        | TranslateX of float\r\n        | TranslateY of float\r\n        interface ITransformsStyle\r\n\r\n    [<KeyValueList>]\r\n    type FlexStyle =\r\n        | AlignItems of ItemAlignment\r\n        | AlignSelf of Alignment\r\n        | BorderBottomWidth of float\r\n        | BorderLeftWidth of float\r\n        | BorderRightWidth of float\r\n        | BorderTopWidth of float\r\n        | BorderWidth of float\r\n        | Bottom of float\r\n        | Flex of float\r\n        | FlexDirection of FlexDirection\r\n        | FlexWrap of FlexWrap\r\n        | Height of float\r\n        | JustifyContent of JustifyContent\r\n        | Left of float\r\n        | MinWidth of float\r\n        | MaxWidth of float\r\n        | MinHeight of float\r\n        | MaxHeight of float\r\n        | Margin of float\r\n        | MarginBottom of float\r\n        | MarginHorizontal of float\r\n        | MarginLeft of float\r\n        | MarginRight of float\r\n        | MarginTop of float\r\n        | MarginVertical of float\r\n        | Padding of float\r\n        | PaddingBottom of float\r\n        | PaddingHorizontal of float\r\n        | PaddingLeft of float\r\n        | PaddingRight of float\r\n        | PaddingTop of float\r\n        | PaddingVertical of float\r\n        | Position of Position\r\n        | Right of float\r\n        | Top of float\r\n        | Width of float\r\n        | ZIndex of float\r\n        interface IFlexStyle\r\n\r\n\r\n    [<KeyValueList>]\r\n    type ViewStyle =\r\n        | BackfaceVisibility of string\r\n        | BackgroundColor of string\r\n        | BorderBottomColor of string\r\n        | BorderBottomLeftRadius of float\r\n        | BorderBottomRightRadius of float\r\n        | BorderBottomWidth of float\r\n        | BorderColor of string\r\n        | BorderLeftColor of string\r\n        | BorderRadius of float\r\n        | BorderRightColor of string\r\n        | BorderRightWidth of float\r\n        | BorderStyle of BorderStyle\r\n        | BorderTopColor of string\r\n        | BorderTopLeftRadius of float\r\n        | BorderTopRightRadius of float\r\n        | BorderTopWidth of float\r\n        | Opacity of float\r\n        | Overflow of Overflow\r\n        | ShadowColor of string\r\n        | ShadowOffset of obj\r\n        | ShadowOpacity of float\r\n        | ShadowRadius of float\r\n        | Elevation of float\r\n        | TestID of string\r\n        interface IViewStyle\r\n\r\n    [<KeyValueList>]\r\n    type Insets =\r\n        | Top of float\r\n        | Left of float\r\n        | Bottom of float\r\n        | Right of float\r\n\r\n    [<KeyValueList>]\r\n    type Touchable =\r\n        | OnTouchStart of (GestureResponderEvent -> unit)\r\n        | OnTouchMove of (GestureResponderEvent -> unit)\r\n        | OnTouchEnd of (GestureResponderEvent -> unit)\r\n        | OnTouchCancel of (GestureResponderEvent -> unit)\r\n        | OnTouchEndCapture of (GestureResponderEvent -> unit)\r\n        interface ITouchable\r\n\r\n    [<KeyValueList>]\r\n    type LayoutAnimationAnim =\r\n        | Duration of float\r\n        | Delay of float\r\n        | SpringDamping of float\r\n        | InitialVelocity of float\r\n        | Type of string\r\n        | Property of string\r\n\r\n    [<KeyValueList>]\r\n    type LayoutAnimationConfig =\r\n        | Delay of float //REQUIRED!\r\n        | Create of LayoutAnimationAnim\r\n        | Update of LayoutAnimationAnim\r\n        | Delete of LayoutAnimationAnim\r\n\r\n    [<KeyValueList>]\r\n    type TextStyleIOS =\r\n        | LetterSpacing of float\r\n        | TextDecorationColor of string\r\n        | TextDecorationStyle of TextDecorationStyle\r\n        | WritingDirection of WritingDirection\r\n        interface ITextStyleIOS\r\n\r\n    [<KeyValueList>]\r\n    type TextStyleAndroid =\r\n        | TextAlignVertical of TextAlignVertical\r\n        interface ITextStyleAndroid\r\n\r\n    [<KeyValueList>]\r\n    type TextStyle =\r\n        | Color of string\r\n        | FontFamily of string\r\n        | FontSize of float\r\n        | FontStyle of FontStyle\r\n        | FontWeight of FontWeight\r\n        | LetterSpacing of float\r\n        | LineHeight of float\r\n        | TextAlign of TextAlignment\r\n        | TextDecorationLine of TextDecorationLine\r\n        | TextDecorationStyle of TextDecorationStyle\r\n        | TextDecorationColor of string\r\n        | TextShadowColor of string\r\n        | TextShadowOffset of obj\r\n        | TextShadowRadius of float\r\n        | TestID of string\r\n        interface ITextStyle\r\n\r\n    [<KeyValueList>]\r\n    type ITextPropertiesIOS =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITextProperties =\r\n        inherit ITextPropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type TextPropertiesIOS =\r\n        | AllowFontScaling of bool // REQUIRED!\r\n        | SuppressHighlighting of bool\r\n        interface ITextPropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type TextProperties =\r\n        | AllowFontScaling of bool\r\n        | LineBreakMode of LineBreakMode\r\n        | NumberOfLines of float\r\n        | OnLayout of Func<LayoutChangeEvent, unit>\r\n        | OnPress of (unit->unit)\r\n        | Style of IStyle list\r\n        | TestID of string\r\n        interface ITextProperties\r\n\r\n    [<KeyValueList>]\r\n    type ITextInputIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITextInputAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITextInputProperties =\r\n        inherit ITextInputIOSProperties\r\n        inherit ITextInputAndroidProperties\r\n\r\n    module TextInput =\r\n        [<KeyValueList>]\r\n        type TextInputIOSProperties =\r\n            | ClearButtonMode of string\r\n            | ClearTextOnFocus of bool\r\n            | EnablesReturnKeyAutomatically of bool\r\n            | OnKeyPress of (unit->unit)\r\n            | SelectionState of obj\r\n            interface ITextInputIOSProperties\r\n\r\n        [<KeyValueList>]\r\n        type TextInputAndroidProperties =\r\n            | NumberOfLines of float\r\n            | ReturnKeyLabel of string\r\n            | TextAlign of string\r\n            | TextAlignVertical of string\r\n            | UnderlineColorAndroid of string\r\n            interface ITextInputAndroidProperties\r\n\r\n        [<KeyValueList>]\r\n        type TextInputProperties =\r\n            | AutoCapitalize of AutoCapitalize\r\n            | AutoCorrect of bool\r\n            | AutoFocus of bool\r\n            | BlurOnSubmit of bool\r\n            | DefaultValue of string\r\n            | Editable of bool\r\n            | KeyboardType of KeyboardType\r\n            | MaxLength of float\r\n            | Multiline of bool\r\n            | OnBlur of (unit->unit)\r\n            | OnChange of (obj -> unit)\r\n            | OnChangeText of (string -> unit)\r\n            | OnEndEditing of (obj -> unit)\r\n            | OnFocus of (unit->unit)\r\n            | OnLayout of Func<obj, unit>\r\n            | OnSelectionChange of (unit->unit)\r\n            | OnSubmitEditing of Func<obj, unit>\r\n            | Password of bool\r\n            | Placeholder of string\r\n            | PlaceholderTextColor of string\r\n            | ReturnKeyType of ReturnKeyType\r\n            | SecureTextEntry of bool\r\n            | SelectTextOnFocus of bool\r\n            | SelectionColor of string\r\n            | Style of IStyle list\r\n            | TestID of string\r\n            | Value of string\r\n            interface ITextInputProperties\r\n\r\n    module Toolbar =\r\n        [<KeyValueList>]\r\n        type ToolbarAndroidProperties =\r\n            | Actions of ToolbarAndroidAction []\r\n            | ContentInsetEnd of float\r\n            | ContentInsetStart of float\r\n            | Logo of obj\r\n            | NavIcon of obj\r\n            | OnIconClicked of (unit->unit)\r\n            | OverflowIcon of obj\r\n            | Rtl of bool\r\n            | Style of IStyle list\r\n            | Subtitle of string\r\n            | SubtitleColor of string\r\n            | TestID of string\r\n            | Title of string\r\n            | TitleColor of string\r\n            | Ref of Ref<ToolbarAndroid>\r\n            interface IToolbarAndroidProperties\r\n\r\n    [<KeyValueList>]\r\n    type GestureResponderHandlers =\r\n        | OnStartShouldSetResponder of Func<GestureResponderEvent, bool>\r\n        | OnMoveShouldSetResponder of Func<GestureResponderEvent, bool>\r\n        | OnResponderGrant of Func<GestureResponderEvent, unit>\r\n        | OnResponderReject of Func<GestureResponderEvent, unit>\r\n        | OnResponderMove of Func<GestureResponderEvent, unit>\r\n        | OnResponderRelease of Func<GestureResponderEvent, unit>\r\n        | OnResponderTerminationRequest of Func<GestureResponderEvent, bool>\r\n        | OnResponderTerminate of Func<GestureResponderEvent, unit>\r\n        | OnStartShouldSetResponderCapture of Func<GestureResponderEvent, bool>\r\n        | OnMoveShouldSetResponderCapture of (unit->unit)\r\n        interface IGestureResponderHandlers\r\n\r\n    type ViewPropertiesIOS =\r\n        | AccessibilityTraits of U2<string, ResizeArray<string>>\r\n        | ShouldRasterizeIOS of bool\r\n        interface IViewPropertiesIOS\r\n\r\n    type ViewPropertiesAndroid =\r\n        | AccessibilityComponentType of string\r\n        | AccessibilityLiveRegion of string\r\n        | Collapsable of bool\r\n        | ImportantForAccessibility of string\r\n        | NeedsOffscreenAlphaCompositing of bool\r\n        | RenderToHardwareTextureAndroid of bool\r\n        interface IViewPropertiesAndroid\r\n\r\n    [<KeyValueList>]\r\n    type ViewProperties =\r\n        | AccessibilityLabel of string\r\n        | Accessible of bool\r\n        | HitSlop of obj\r\n        | OnAcccessibilityTap of (unit->unit)\r\n        | OnLayout of Func<LayoutChangeEvent, unit>\r\n        | OnMagicTap of (unit->unit)\r\n        | PointerEvents of PointerEvents\r\n        | RemoveClippedSubviews of bool\r\n        | Style of IStyle list\r\n        | TestID of string\r\n        interface IViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ViewPagerAndroidProperties =\r\n        | InitialPage of float\r\n        | ScrollEnabled of bool\r\n        | OnPageScroll of Func<NativeSyntheticEvent<ViewPagerAndroidOnPageScrollEventData>, unit>\r\n        | OnPageSelected of Func<NativeSyntheticEvent<ViewPagerAndroidOnPageSelectedEventData>, unit>\r\n        | OnPageScrollStateChanged of Func<ScrollState, unit>\r\n        | KeyboardDismissMode of KeyboardDismissMode\r\n        | PageMargin of float\r\n        | Style of IStyle list\r\n        | Ref of Ref<obj>\r\n        interface IViewPagerAndroidProperties\r\n\r\n    [<KeyValueList>]\r\n    type KeyboardAvoidingViewProps =\r\n        | Behavior of Behavior\r\n        | KeyboardVerticalOffset of float // REQUIRED!\r\n        | Ref of Ref<obj>\r\n        interface IKeyboardAvoidingViewProps\r\n\r\n    [<KeyValueList>]\r\n    type WebViewPropertiesAndroid =\r\n        | JavaScriptEnabled of bool\r\n        | DomStorageEnabled of bool\r\n        interface IWebViewPropertiesAndroid\r\n\r\n    [<KeyValueList>]\r\n    type WebViewPropertiesIOS =\r\n        | AllowsInlineMediaPlayback of bool\r\n        | Bounces of bool\r\n        | DecelerationRate of DecelerationRate\r\n        | OnShouldStartLoadWithRequest of Func<WebViewIOSLoadRequestEvent, bool>\r\n        | ScrollEnabled of bool\r\n        interface IWebViewPropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type WebViewUriSource =\r\n        | Uri of string\r\n        | Method of string\r\n        | Headers of obj\r\n        | Body of string\r\n\r\n    [<KeyValueList>]\r\n    type WebViewHtmlSource =\r\n        | Html of string // REQUIRED!\r\n        | BaseUrl of string\r\n\r\n    [<KeyValueList>]\r\n    type WebViewProperties =\r\n        | AutomaticallyAdjustContentInsets of bool\r\n        | Bounces of bool\r\n        | ContentInset of Insets\r\n        | Html of string\r\n        | InjectedJavaScript of string\r\n        | OnError of Func<NavState, unit>\r\n        | OnLoad of Func<NavState, unit>\r\n        | OnLoadEnd of Func<NavState, unit>\r\n        | OnLoadStart of Func<NavState, unit>\r\n        | OnNavigationStateChange of Func<NavState, unit>\r\n        | OnShouldStartLoadWithRequest of Func<bool>\r\n        | RenderError of Func<React.ReactElement>\r\n        | RenderLoading of Func<React.ReactElement>\r\n        | ScrollEnabled of bool\r\n        | StartInLoadingState of bool\r\n        | Style of IStyle list\r\n        | Url of string\r\n        | Source of U3<WebViewUriSource, WebViewHtmlSource, float>\r\n        | MediaPlaybackRequiresUserAction of bool\r\n        | ScalesPageToFit of bool\r\n        | Ref of Ref<obj>\r\n        interface IWebViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type SegmentedControlIOSProperties =\r\n        | Enabled of bool\r\n        | Momentary of bool\r\n        | OnChange of Func<NativeSyntheticEvent<NativeSegmentedControlIOSChangeEvent>, unit>\r\n        | OnValueChange of Func<string, unit>\r\n        | SelectedIndex of float\r\n        | TintColor of string\r\n        | Values of ResizeArray<string>\r\n        | Ref of Ref<SegmentedControlIOS>\r\n        interface ISegmentedControlIOSProperties\r\n\r\n    [<KeyValueList>]\r\n    type NavigatorIOSProperties =\r\n        | BarTintColor of string\r\n        | InitialRoute of Route\r\n        | ItemWrapperStyle of ViewStyle list\r\n        | NavigationBarHidden of bool\r\n        | ShadowHidden of bool\r\n        | TintColor of string\r\n        | TitleTextColor of string\r\n        | Translucent of bool\r\n        | Style of IStyle list\r\n\r\n    module ActivityIndicator =\r\n        [<KeyValueList>]\r\n        type ActivityIndicatorProperties =\r\n            | Animating of bool\r\n            | Color of string\r\n            | HidesWhenStopped of bool\r\n            | Size of Size\r\n            | Style of IStyle list\r\n            | Ref of Ref<ActivityIndicator>\r\n            interface IViewProperties\r\n\r\n\r\n        [<KeyValueList>]\r\n        type ActivityIndicatorIOSProperties =\r\n            | Animating of bool\r\n            | Color of string\r\n            | HidesWhenStopped of bool\r\n            | OnLayout of Func<obj, unit>\r\n            | Size of Size\r\n            | Style of IStyle list\r\n            | Ref of Ref<ActivityIndicatorIOS>\r\n            interface IViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type DatePickerIOSProperties =\r\n        | Date of DateTime\r\n        | MaximumDate of DateTime\r\n        | MinimumDate of DateTime\r\n        | MinuteInterval of float\r\n        | Mode of DatePickerIOSMode\r\n        | OnDateChange of Func<DateTime, unit>\r\n        | TimeZoneOffsetInMinutes of float\r\n        | Ref of Ref<DatePickerIOS>\r\n        interface IDatePickerIOSProperties\r\n\r\n    [<KeyValueList>]\r\n    type DrawerLayoutAndroidProperties =\r\n        | DrawerBackgroundColor of string\r\n        | DrawerLockMode of DrawerLockMode\r\n        | DrawerPosition of DrawerLayoutAndroidPosition\r\n        | DrawerWidth of float\r\n        | KeyboardDismissMode of KeyboardDismissMode\r\n        | OnDrawerClose of (unit->unit)\r\n        | OnDrawerOpen of (unit->unit)\r\n        | OnDrawerSlide of Func<DrawerSlideEvent, unit>\r\n        | OnDrawerStateChanged of Func<ScrollState, unit>\r\n        | RenderNavigationView of Func<obj>\r\n        | StatusBarBackgroundColor of obj\r\n        | Ref of Ref<obj>\r\n        interface IDrawerLayoutAndroidProperties\r\n\r\n    module Picker =\r\n        [<KeyValueList>]\r\n        type PickerIOSItemProperties =\r\n            | Value of U2<string, float>\r\n            | Label of string\r\n\r\n\r\n        [<KeyValueList>]\r\n        type PickerItemProperties =\r\n            | Label of string // REQUIRED!\r\n            | Value of obj\r\n            | Color of string\r\n            | TestID of string\r\n\r\n\r\n        [<KeyValueList>]\r\n        type PickerPropertiesIOS =\r\n            | ItemStyle of IStyle list\r\n            | Ref of Ref<obj>\r\n            interface IPickerProperties\r\n\r\n        [<KeyValueList>]\r\n        type PickerPropertiesAndroid =\r\n            | Enabled of bool\r\n            | Mode of Mode\r\n            | Prompt of string\r\n            | Ref of Ref<obj>\r\n            interface IPickerProperties\r\n\r\n        [<KeyValueList>]\r\n        type PickerProperties =\r\n            | OnValueChange of Func<obj, float, unit>\r\n            | SelectedValue of obj\r\n            | Style of IStyle list\r\n            | TestId of string\r\n            | Ref of Ref<Picker>\r\n            interface IPickerProperties\r\n\r\n        [<KeyValueList>]\r\n        type PickerIOSProperties =\r\n            | ItemStyle of ViewStyle list\r\n            interface IPickerProperties\r\n\r\n    module ProgressBar =\r\n        [<KeyValueList>]\r\n        type ProgressBarAndroidProperties =\r\n            | Style of IStyle list\r\n            | StyleAttr of StyleAttr\r\n            | Indeterminate of bool\r\n            | Progress of float\r\n            | Color of string\r\n            | TestID of string\r\n            | Ref of Ref<ProgressBarAndroid>\r\n            interface IProgressBarAndroidProperties\r\n\r\n        [<KeyValueList>]\r\n        type ProgressViewIOSProperties =\r\n            | Style of IStyle list\r\n            | ProgressViewStyle of ProgressViewStyle\r\n            | Progress of float\r\n            | ProgressTintColor of string\r\n            | TrackTintColor of string\r\n            | ProgressImage of obj\r\n            | TrackImage of obj\r\n            | Ref of Ref<ProgressViewIOS>\r\n            interface IProgressViewIOSProperties\r\n\r\n    [<KeyValueList>]\r\n    type RefreshControlPropertiesIOS =\r\n        | TintColor of string\r\n        | Title of string\r\n        | TitleColor of string\r\n        | Ref of Ref<obj>\r\n        interface IRefreshControlProperties\r\n\r\n\r\n    [<KeyValueList>]\r\n    type RefreshControlPropertiesAndroid =\r\n        | Colors of ResizeArray<string>\r\n        | Enabled of bool\r\n        | ProgressBackgroundColor of string\r\n        | Size of float\r\n        | ProgressViewOffset of float\r\n        | Ref of Ref<obj>\r\n        interface IRefreshControlProperties\r\n\r\n    [<KeyValueList>]\r\n    type RefreshControlProperties =\r\n        | OnRefresh of (unit->unit)\r\n        | Refreshing of bool\r\n        | Ref of Ref<RefreshControl>\r\n        interface IRefreshControlProperties\r\n\r\n    [<KeyValueList>]\r\n    type SliderPropertiesIOS =\r\n        | MaximumTrackImage of obj\r\n        | MaximumTrackTintColor of string\r\n        | MinimumTrackImage of string\r\n        | MinimumTrackTintColor of string\r\n        | ThumbImage of obj\r\n        | TrackImage of obj\r\n        | Ref of Ref<Slider>\r\n        interface ISliderProperties\r\n\r\n    [<KeyValueList>]\r\n    type SliderProperties =\r\n        | Disabled of bool\r\n        | MaximumValue of float\r\n        | MinimumValue of float\r\n        | OnSlidingComplete of Func<float, unit>\r\n        | OnValueChange of Func<float, unit>\r\n        | Step of float\r\n        | Style of IStyle list\r\n        | TestID of string\r\n        | Value of float\r\n        interface ISliderProperties\r\n\r\n    [<KeyValueList>]\r\n    type SliderIOSProperties =\r\n        | Disabled of bool\r\n        | MaximumValue of float\r\n        | MaximumTrackTintColor of string\r\n        | MinimumValue of float\r\n        | MinimumTrackImage of obj\r\n        | MinimumTrackTintColor of string\r\n        | OnSlidingComplete of (unit->unit)\r\n        | OnValueChange of Func<float, unit>\r\n        | Step of float\r\n        | Style of IStyle list\r\n        | Value of float\r\n        | Ref of Ref<SliderIOS>\r\n        interface ISliderIOSProperties\r\n\r\n    [<KeyValueList>]\r\n    type SwitchIOSStyle =\r\n        | Height of float\r\n        | Width of float\r\n        interface ISwitchIOSStyle\r\n\r\n    [<KeyValueList>]\r\n    type SwitchIOSProperties =\r\n        | Disabled of bool\r\n        | OnTintColor of string\r\n        | OnValueChange of Func<bool, unit>\r\n        | ThumbTintColor of string\r\n        | TintColor of string\r\n        | Value of bool\r\n        | Style of IStyle list\r\n\r\n    [<KeyValueList>]\r\n    type ImageStyle =\r\n        | ResizeMode of string\r\n        | BackfaceVisibility of BackfaceVisibility\r\n        | BorderBottomLeftRadius of float\r\n        | BorderBottomRightRadius of float\r\n        | BackgroundColor of string\r\n        | BorderColor of string\r\n        | BorderWidth of float\r\n        | BorderRadius of float\r\n        | BorderTopLeftRadius of float\r\n        | BorderTopRightRadius of float\r\n        | Overflow of Overflow\r\n        | OverlayColor of string\r\n        | TintColor of string\r\n        | Opacity of float\r\n        interface IImageStyle\r\n\r\n    [<KeyValueList>]\r\n    type IImagePropertiesIOS =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type IImageProperties =\r\n        inherit IImagePropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type IImageSourceProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ImageSourceProperties =\r\n        | Uri of string\r\n        | IsStatic of bool\r\n        interface IImageSourceProperties\r\n\r\n    [<KeyValueList>]\r\n    type ImagePropertiesIOS =\r\n        | AccessibilityLabel of string\r\n        | Accessible of bool\r\n        | CapInsets of Insets\r\n        | DefaultSource of IImageSourceProperties list\r\n        | OnError of Func<obj, unit>\r\n        | OnProgress of (unit->unit)\r\n        interface IImagePropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type ImageProperties =\r\n        | OnLayout of Func<LayoutChangeEvent, unit>\r\n        | OnLoad of (unit->unit)\r\n        | OnLoadEnd of (unit->unit)\r\n        | OnLoadStart of (unit->unit)\r\n        | ResizeMode of ResizeMode\r\n        | Source of IImageSourceProperties list\r\n        | Style of IStyle list\r\n        | TestID of string\r\n        interface IImageProperties\r\n\r\n\r\n    [<KeyValueList>]\r\n    type MapViewAnnotation =\r\n        | Latitude of float\r\n        | Longitude of float\r\n        | AnimateDrop of bool\r\n        | Title of string\r\n        | Subtitle of string\r\n        | HasLeftCallout of bool\r\n        | HasRightCallout of bool\r\n        | OnLeftCalloutPress of (unit->unit)\r\n        | OnRightCalloutPress of (unit->unit)\r\n        | Id of string\r\n\r\n    type MapViewRegion =\r\n        | Latitude of float\r\n        | Longitude of float\r\n        | LatitudeDelta of float\r\n        | LongitudeDelta of float\r\n\r\n    [<KeyValueList>]\r\n    type MapViewOverlay =\r\n        | Coordinates of ResizeArray<obj>\r\n        | LineWidth of float\r\n        | StrokeColor of obj\r\n        | FillColor of obj\r\n        | Id of string\r\n\r\n    [<KeyValueList>]\r\n    type MapViewPropertiesIOS =\r\n        | ShowsPointsOfInterest of bool\r\n        | Annotations of ResizeArray<MapViewAnnotation>\r\n        | FollowUserLocation of bool\r\n        | LegalLabelInsets of Insets\r\n        | MapType of string\r\n        | MaxDelta of float\r\n        | MinDelta of float\r\n        | Overlays of ResizeArray<MapViewOverlay>\r\n        | ShowsCompass of bool\r\n\r\n    [<KeyValueList>]\r\n    type MapViewPropertiesAndroid =\r\n        | Active of bool\r\n        interface IMapViewPropertiesAndroid\r\n\r\n    [<KeyValueList>]\r\n    type MapViewProperties =\r\n        | OnAnnotationPress of (unit->unit)\r\n        | OnRegionChange of Func<MapViewRegion, unit>\r\n        | OnRegionChangeComplete of Func<MapViewRegion, unit>\r\n        | PitchEnabled of bool\r\n        | Region of MapViewRegion\r\n        | RotateEnabled of bool\r\n        | ScrollEnabled of bool\r\n        | ShowsUserLocation of bool\r\n        | Style of IStyle list\r\n        | ZoomEnabled of bool\r\n        | Ref of Ref<obj>\r\n        interface IMapViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ModalProperties =\r\n        | Animated of bool\r\n        | AnimationType of AnimationType\r\n        | Transparent of bool\r\n        | Visible of bool\r\n        | OnRequestClose of (unit->unit)\r\n        | OnShow of Func<NativeSyntheticEvent<obj>, unit>\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableHighlightProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableOpacityProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableNativeFeedbackProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableWithoutFeedbackIOSProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableWithoutFeedbackAndroidProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type ITouchableWithoutFeedbackProperties =\r\n        inherit ITouchableWithoutFeedbackAndroidProperties\r\n        inherit ITouchableWithoutFeedbackIOSProperties\r\n        inherit ITouchableNativeFeedbackProperties\r\n        inherit ITouchableOpacityProperties\r\n        inherit ITouchableHighlightProperties\r\n\r\n    [<KeyValueList>]\r\n    type TouchableWithoutFeedbackAndroidProperties =\r\n        | AccessibilityComponentType of string\r\n        interface ITouchableWithoutFeedbackAndroidProperties\r\n\r\n    [<KeyValueList>]\r\n    type TouchableWithoutFeedbackIOSProperties =\r\n        | AccessibilityTraits of U2<string, ResizeArray<string>>\r\n        interface ITouchableWithoutFeedbackIOSProperties\r\n\r\n    [<KeyValueList>]\r\n    type TouchableWithoutFeedbackProperties =\r\n        | Accessible of bool\r\n        | DelayLongPress of float\r\n        | DelayPressIn of float\r\n        | DelayPressOut of float\r\n        | Disabled of bool\r\n        | HitSlop of obj\r\n        | OnLayout of Func<LayoutChangeEvent, unit>\r\n        | OnLongPress of (unit->unit)\r\n        | OnPress of (unit->unit)\r\n        | OnPressIn of (unit->unit)\r\n        | OnPressOut of (unit->unit)\r\n        | Style of IStyle list\r\n        | PressRetentionOffset of obj\r\n        interface ITouchableWithoutFeedbackProperties\r\n\r\n    [<KeyValueList>]\r\n    type TouchableHighlightProperties =\r\n        | ActiveOpacity of float\r\n        | OnHideUnderlay of (unit->unit)\r\n        | OnShowUnderlay of (unit->unit)\r\n        | Style of IStyle list\r\n        | UnderlayColor of string\r\n        interface ITouchableHighlightProperties\r\n\r\n    [<KeyValueList>]\r\n    type TouchableOpacityProperties =\r\n        | ActiveOpacity of float\r\n        interface ITouchableOpacityProperties\r\n\r\n\r\n    [<KeyValueList>]\r\n    type TouchableNativeFeedbackProperties =\r\n        | Background of obj\r\n        interface ITouchableNativeFeedbackProperties\r\n\r\n    [<KeyValueList>]\r\n    type NavigationBarRouteMapper =\r\n        | Title of Func<Route, Navigator, float, NavState, React.ReactElement>\r\n        | LeftButton of Func<Route, Navigator, float, NavState, React.ReactElement>\r\n        | RightButton of Func<Route, Navigator, float, NavState, React.ReactElement>\r\n\r\n    [<KeyValueList>]\r\n    type NavigationBarProperties =\r\n        | Navigator of Navigator\r\n        | RouteMapper of NavigationBarRouteMapper\r\n        | NavState of NavState\r\n        | Style of IStyle list\r\n\r\n    [<KeyValueList>]\r\n    type INavigatorProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type NavigatorProperties =\r\n        | ConfigureScene of Func<Route, ResizeArray<Route>, SceneConfig>\r\n        | InitialRoute of Route\r\n        | InitialRouteStack of ResizeArray<Route>\r\n        | NavigationBar of React.ReactElement // React.ReactElement option\r\n        | Navigator of Navigator\r\n        | OnDidFocus of (unit->unit)\r\n        | OnWillFocus of (unit->unit)\r\n        | RenderScene of Func<Route, Navigator, React.ReactElement>\r\n        | SceneStyle of ViewStyle list\r\n        | DebugOverlay of bool\r\n        interface INavigatorProperties\r\n\r\n    module ToolBar =\r\n        [<KeyValueList>]\r\n        type TabBarItemProperties =\r\n            | Badge of U2<string, float>\r\n            | Icon of U2<obj, string>\r\n            | OnPress of (unit->unit)\r\n            | Selected of bool\r\n            | SelectedIcon of U2<obj, string>\r\n            | Style of IStyle list\r\n            | SystemIcon of SystemIcon\r\n            | Title of string\r\n            | Ref of Ref<obj>\r\n            interface IViewProperties\r\n\r\n        [<KeyValueList>]\r\n        type TabBarIOSProperties =\r\n            | BarTintColor of string\r\n            | Style of IStyle list\r\n            | TintColor of string\r\n            | Translucent of bool\r\n            | UnselectedTintColor of string\r\n            | Ref of Ref<obj>\r\n            interface IViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ScrollViewStyle =\r\n        | BackfaceVisibility of BackfaceVisibility\r\n        | BackgroundColor of string\r\n        | BorderColor of string\r\n        | BorderTopColor of string\r\n        | BorderRightColor of string\r\n        | BorderBottomColor of string\r\n        | BorderLeftColor of string\r\n        | BorderRadius of float\r\n        | BorderTopLeftRadius of float\r\n        | BorderTopRightRadius of float\r\n        | BorderBottomLeftRadius of float\r\n        | BorderBottomRightRadius of float\r\n        | BorderStyle of BorderStyle\r\n        | BorderWidth of float\r\n        | BorderTopWidth of float\r\n        | BorderRightWidth of float\r\n        | BorderBottomWidth of float\r\n        | BorderLeftWidth of float\r\n        | Opacity of float\r\n        | Overflow of Overflow\r\n        | ShadowColor of string\r\n        | ShadowOffset of obj\r\n        | ShadowOpacity of float\r\n        | ShadowRadius of float\r\n        | Elevation of float\r\n        interface IScrollViewStyle\r\n\r\n    [<KeyValueList>]\r\n    type IScrollViewPropertiesIOS =\r\n        inherit IScrollViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ScrollViewPropertiesIOS =\r\n        | AlwaysBounceHorizontal of bool\r\n        | AlwaysBounceVertical of bool\r\n        | AutomaticallyAdjustContentInsets of bool\r\n        | Bounces of bool\r\n        | BouncesZoom of bool\r\n        | CanCancelContentTouches of bool\r\n        | CenterContent of bool\r\n        | ContentInset of Insets\r\n        | ContentOffset of PointProperties\r\n        | DecelerationRate of DecelerationRate\r\n        | DirectionalLockEnabled of bool\r\n        | IndicatorStyle of IndicatorStyle\r\n        | MaximumZoomScale of float\r\n        | MinimumZoomScale of float\r\n        | OnRefreshStart of (unit->unit)\r\n        | OnScrollAnimationEnd of (unit->unit)\r\n        | ScrollEnabled of bool\r\n        | ScrollEventThrottle of float\r\n        | ScrollIndicatorInsets of Insets\r\n        | ScrollsToTop of bool\r\n        | SnapToAlignment of string\r\n        | SnapToInterval of float\r\n        | StickyHeaderIndices of ResizeArray<float>\r\n        | ZoomScale of float\r\n        interface IScrollViewPropertiesIOS\r\n\r\n    [<KeyValueList>]\r\n    type IScrollViewPropertiesAndroid =\r\n        inherit IScrollViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type ScrollViewPropertiesAndroid =\r\n        | EndFillColor of string\r\n        | ScrollPerfTag of string\r\n        interface IScrollViewPropertiesAndroid\r\n\r\n    [<KeyValueList>]\r\n    type ScrollViewProperties =\r\n        | ContentContainerStyle of ViewStyle list\r\n        | Horizontal of bool\r\n        | KeyboardDismissMode of string\r\n        | KeyboardShouldPersistTaps of bool\r\n        | OnScroll of Func<obj, unit>\r\n        | PagingEnabled of bool\r\n        | RemoveClippedSubviews of bool\r\n        | ShowsHorizontalScrollIndicator of bool\r\n        | ShowsVerticalScrollIndicator of bool\r\n        | Style of IStyle list\r\n        | RefreshControl of React.ReactElement\r\n        | Ref of Ref<ScrollView>\r\n        interface IScrollViewProperties\r\n\r\n\r\n    [<KeyValueList>]\r\n    type ListViewProperties<'a>  =\r\n        | DataSource of ListViewDataSource<'a>\r\n        | EnableEmptySections of bool\r\n        | InitialListSize of float\r\n        | OnChangeVisibleRows of Func<ResizeArray<obj>, ResizeArray<obj>, unit>\r\n        | OnEndReached of (unit->unit)\r\n        | OnEndReachedThreshold of float\r\n        | PageSize of float\r\n        | RemoveClippedSubviews of bool\r\n        | RenderFooter of Func<React.ReactElement>\r\n        | RenderHeader of Func<React.ReactElement>\r\n        | RenderRow of Func<'a, U2<string, float>, U2<string, float>, bool, React.ReactElement>\r\n        | RenderScrollComponent of Func<ScrollViewProperties, React.ReactElement>\r\n        | RenderSectionHeader of Func<obj, U2<string, float>, React.ReactElement>\r\n        | RenderSeparator of Func<U2<string, float>, U2<string, float>, bool, React.ReactElement>\r\n        | ScrollRenderAheadDistance of float\r\n        | Ref of Ref<obj>\r\n        interface IListViewProperties\r\n\r\n    [<KeyValueList>]\r\n    type SwipeableListViewProps<'a> =\r\n        | DataSource of SwipeableListViewDataSource<'a> // REQUIRED!\r\n        | MaxSwipeDistance of float\r\n        | RenderRow of Func<'a, U2<string, float>, U2<string, float>, bool, React.ReactElement> // REQUIRED!\r\n        | RenderQuickActions of Func<'a, string, string, React.ReactElement> // REQUIRED!\r\n\r\n    [<KeyValueList>]\r\n    type ActionSheetIOSOptions =\r\n        | Title of string\r\n        | Options of ResizeArray<string>\r\n        | CancelButtonIndex of float\r\n        | DestructiveButtonIndex of float\r\n        | Message of string\r\n\r\n    [<KeyValueList>]\r\n    type ShareActionSheetIOSOptions =\r\n        | Message of string\r\n        | Url of string\r\n\r\n\r\n    [<KeyValueList>]\r\n    type DatePickerAndroidOpenOption =\r\n        | Date of U2<DateTime, float>\r\n        | MinDate of U2<DateTime, float>\r\n        | MaxDate of U2<DateTime, float>\r\n\r\n    [<KeyValueList>]\r\n    type PanResponderCallbacks =\r\n        | OnMoveShouldSetPanResponder of Func<GestureResponderEvent, PanResponderGestureState, bool>\r\n        | OnStartShouldSetPanResponder of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderGrant of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderMove of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderRelease of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderTerminate of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnMoveShouldSetPanResponderCapture of Func<GestureResponderEvent, PanResponderGestureState, bool>\r\n        | OnStartShouldSetPanResponderCapture of Func<GestureResponderEvent, PanResponderGestureState, bool>\r\n        | OnPanResponderReject of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderStart of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderEnd of Func<GestureResponderEvent, PanResponderGestureState, unit>\r\n        | OnPanResponderTerminationRequest of Func<GestureResponderEvent, PanResponderGestureState, bool>\r\n\r\n    module StatusBar =\r\n        [<KeyValueList>]\r\n        type StatusBarPropertiesIOS =\r\n            | BarStyle of StatusBarStyle list\r\n            | NetworkActivityIndicatorVisible of bool\r\n            | ShowHideTransition of ShowHideTransition\r\n            interface IStatusBarProperties\r\n\r\n        [<KeyValueList>]\r\n        type StatusBarPropertiesAndroid =\r\n            | BackgroundColor of obj\r\n            | Translucent of bool\r\n            interface IStatusBarProperties\r\n\r\n    [<KeyValueList>]\r\n    type StatusBarProperties =\r\n        | Animated of bool\r\n        | Hidden of bool\r\n        interface IStatusBarProperties\r\n\r\n    [<KeyValueList>]\r\n    type SwitchPropertiesIOS =\r\n        | OnTintColor of string\r\n        | ThumbTintColor of string\r\n        | TintColor of string\r\n        | Ref of Ref<Switch>\r\n        interface ISwitchProperties\r\n\r\n    [<KeyValueList>]\r\n    type SwitchProperties =\r\n        | Disabled of bool\r\n        | TestID of string\r\n        | Style of IStyle list\r\n        | Ref of Ref<Switch>\r\n        interface ISwitchProperties\r\n\r\n    [<KeyValueList>]\r\n    type NavigationAnimatedViewProps =\r\n        | Route of obj\r\n        | Style of IStyle list\r\n        | RenderOverlay of (obj -> React.ReactElement)\r\n        | ApplyAnimation of (obj * obj -> unit)\r\n        | RenderScene of (obj -> React.ReactElement)\r\n\r\n\r\n    [<KeyValueList>]\r\n    type INavigationHeaderProps =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type NavigationHeaderProps =\r\n        | RenderTitleComponent of (NavigationTransitionProps -> React.ReactElement)\r\n        | RenderLeftComponent of (NavigationTransitionProps -> React.ReactElement)\r\n        | RenderRightComponent of (NavigationTransitionProps -> React.ReactElement)\r\n        | StatusBarHeight of U2<float,Animated.Value>\r\n        | OnNavigateBack of (unit -> unit)\r\n        interface INavigationHeaderProps\r\n\r\n    [<KeyValueList>]\r\n    type INavigationCardStackProps =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type NavigationCardStackProps =\r\n        | Direction of Direction\r\n        | Style of IStyle list\r\n        | EnableGestures of bool\r\n        | GestureResponseDistance of float\r\n        | CardStyle of IStyle list\r\n        | RenderHeader of (NavigationTransitionProps -> React.ReactElement)\r\n        | OnNavigateBack of (unit -> unit)\r\n        interface INavigationCardStackProps\r\n\r\n    [<KeyValueList>]\r\n    type IBreadcrumbNavigationBarProperties =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type BreadcrumbNavigationBarProperties =\r\n        | Navigator of Navigator\r\n        | RouteMapper of NavigatorStatic.BreadcrumbNavigationBarRouteMapper\r\n        | NavState of NavState\r\n        | Style of IStyle list\r\n        interface IBreadcrumbNavigationBarProperties\r\n\r\nopen Props\r\nmodule R = Fable.Helpers.React\r\n\r\n[<Emit(\"require($0)\")>]\r\n// Use `require` to load a local image\r\nlet localImage (path:string) : IImageSourceProperties list = jsNative\r\n\r\nlet inline internal createElement(c: React.ComponentClass<'T>, props: obj, children: React.ReactElement list) =\r\n    R.from c (unbox props) children\r\n\r\nlet text (props:TextProperties list) (text:string): React.ReactElement =\r\n    createElement(RN.Text, props, [React.str text])\r\n\r\nlet textInput (props: ITextInputProperties list) (text:string): React.ReactElement =\r\n    createElement(RN.TextInput, props, [R.str text])\r\n\r\nlet createToolbarAction(title:string,showStatus:ToolbarActionShowStatus) : ToolbarAndroidAction =\r\n    createObj [\r\n        \"title\" ==> title\r\n        \"show\" ==> showStatus\r\n    ]\r\n\r\nlet createToolbarActionWithIcon(title:string,icon: IImageSourceProperties list,showStatus:ToolbarActionShowStatus) : ToolbarAndroidAction =\r\n    createObj [\r\n        \"title\" ==> title\r\n        \"icon\" ==> icon\r\n        \"show\" ==> showStatus\r\n    ]\r\n\r\nlet toolbarAndroid (props:IToolbarAndroidProperties list) (onActionSelected:int -> unit) : React.ReactElement =\r\n    createElement(\r\n        RN.ToolbarAndroid,\r\n        JS.Object.assign(\r\n            createObj [\"onActionSelected\" ==> onActionSelected],\r\n            props), [])\r\n\r\nlet keyboardAvoidingView (props:IKeyboardAvoidingViewProps list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.KeyboardAvoidingView,\r\n      props,\r\n      children)\r\n\r\nlet view (props: IViewProperties list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n        RN.View,\r\n        props,\r\n        children)\r\n\r\nlet webView (props:IWebViewProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.WebView,\r\n      props, [])\r\n\r\nlet segmentedControlIOS (props:ISegmentedControlIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.SegmentedControlIOS,\r\n      props, [])\r\n\r\nlet activityIndicator (props:IActivityIndicatorProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.ActivityIndicator,\r\n      props, [])\r\n\r\nlet activityIndicatorIOS (props:IActivityIndicatorIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.ActivityIndicatorIOS,\r\n      props, [])\r\n\r\nlet datePickerIOS (props:IDatePickerIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.DatePickerIOS,\r\n      props, [])\r\n\r\nlet drawerLayoutAndroid (props:IDrawerLayoutAndroidProperties list) (renderNavigationView: unit -> React.ReactElement) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.DrawerLayoutAndroid,\r\n      JS.Object.assign(\r\n            createObj [\"renderNavigationView\" ==> renderNavigationView],\r\n            props),\r\n      children)\r\n\r\nlet pickerIOSItem (props:Picker.PickerIOSItemProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.PickerIOS.Item,\r\n      props, [])\r\n\r\nlet pickerItem (props:Picker.PickerItemProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.Picker.Item,\r\n      props, [])\r\n\r\nlet picker (props:IPickerProperties list) (children:React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.Picker,\r\n      props,\r\n      children)\r\n\r\nlet pickerIOS (props:Picker.PickerIOSProperties list) (children:React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.PickerIOS,\r\n      props,\r\n      children)\r\n\r\nlet progressBarAndroid (props:IProgressBarAndroidProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.ProgressBarAndroid,\r\n      props, [])\r\n\r\nlet progressViewIOS (props:IProgressViewIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.ProgressViewIOS,\r\n      props, [])\r\n\r\nlet refreshControl (props:IRefreshControlProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.RefreshControl,\r\n      props, [])\r\n\r\nlet slider (props:ISliderProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.Slider,\r\n      props, [])\r\n\r\nlet sliderIOS (props:ISliderIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.SliderIOS,\r\n      props, [])\r\n\r\nlet switchIOS (props:SwitchIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.SwitchIOS,\r\n      props, [])\r\n\r\nlet image (props:IImageProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.Image,\r\n      props, [])\r\n\r\nlet imageWithChild (props: IImageProperties list) (child: React.ReactElement) : React.ReactElement =\r\n    createElement(\r\n        RN.Image,\r\n        props,\r\n        [child])\r\n\r\nlet listView<'a> (dataSource:ListViewDataSource<'a>) (props: IListViewProperties list)  : React.ReactElement =\r\n    createElement(\r\n        RN.ListView,\r\n        JS.Object.assign(\r\n            createObj [\"dataSource\" ==> dataSource],\r\n            props), [])\r\n\r\nlet mapView (props:IMapViewProperties list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.MapView,\r\n      props,\r\n      children)\r\n\r\nlet modal (props:ModalProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.Modal,\r\n      props, [])\r\n\r\nlet touchableWithoutFeedback (props:ITouchableWithoutFeedbackProperties list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.TouchableWithoutFeedback,\r\n      props,\r\n      children)\r\n\r\nlet touchableHighlight (props:ITouchableHighlightProperties list) (children: React.ReactElement list) : React.ReactElement =\r\n    createElement(\r\n      RN.TouchableHighlight,\r\n      props,\r\n      children)\r\n\r\nlet touchableHighlightWithChild (props:ITouchableHighlightProperties list) (child: React.ReactElement): React.ReactElement =\r\n    createElement(\r\n      RN.TouchableHighlight,\r\n      props,\r\n      [child])\r\n\r\nlet touchableOpacity (props:ITouchableOpacityProperties list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.TouchableOpacity,\r\n      props,\r\n      children)\r\n\r\nlet touchableNativeFeedback (props:ITouchableNativeFeedbackProperties list) (children: React.ReactElement list): React.ReactElement =\r\n    createElement(\r\n      RN.TouchableNativeFeedback,\r\n      props,\r\n      children)\r\n\r\nlet viewPagerAndroid (props: IViewPagerAndroidProperties list) (children: React.ReactElement list) : React.ReactElement =\r\n    createElement(\r\n        RN.ViewPagerAndroid,\r\n        props,\r\n        children)\r\n\r\nlet navigator (props:INavigatorProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.Navigator,\r\n      props, [])\r\n\r\nlet styleSheet (props:StyleSheetProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.StyleSheet,\r\n      props, [])\r\n\r\nlet tabBarItem (props:ITabBarItemProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.TabBarIOS.Item,\r\n      props, [])\r\n\r\nlet tabBarIOS (props:ITabBarIOSProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.TabBarIOS,\r\n      props, [])\r\n\r\nlet scrollView (props:IScrollViewProperties list) (children: React.ReactElement list) : React.ReactElement =\r\n    createElement(\r\n      RN.ScrollView,\r\n      props,\r\n      children)\r\n\r\nlet swipeableListView (props:SwipeableListViewProps<_> list) : React.ReactElement =\r\n    createElement(\r\n      RN.SwipeableListView,\r\n      props, [])\r\n\r\nlet statusBar (props:IStatusBarProperties list) : React.ReactElement =\r\n    createElement(\r\n      RN.StatusBar,\r\n      props, [])\r\n\r\nlet switch (props:ISwitchProperties list) (onValueChange: bool -> unit) (value:bool) : React.ReactElement =\r\n    createElement(\r\n      RN.Switch,\r\n      JS.Object.assign(\r\n            createObj [\"onValueChange\" ==> onValueChange\r\n                       \"value\" ==> value],\r\n            props), [])\r\n\r\nlet navigationHeader (props:INavigationHeaderProps list) (rendererProps:NavigationTransitionProps): React.ReactElement =\r\n    createElement(\r\n      RN.NavigationExperimental.Header,\r\n      JS.Object.assign(props, rendererProps), [])\r\n\r\nlet navigationState (index:int) (routes:NavigationRoute list): NavigationState =\r\n    createObj [\"index\" ==> index\r\n               \"routes\" ==> Array.ofList routes]\r\n    |> unbox\r\n\r\nlet navigationRoute (key:string) (title:string option): NavigationRoute =\r\n    createObj [\"key\" ==> key\r\n               \"title\" ==> title]\r\n    |> unbox\r\n\r\nlet navigationCardStack (navigationState: NavigationState)\r\n                               (renderScene: NavigationTransitionProps -> React.ReactElement)\r\n                               (props:INavigationCardStackProps list): React.ReactElement =\r\n    createElement(\r\n      RN.NavigationExperimental.CardStack,\r\n      JS.Object.assign(\r\n            createObj [\"renderScene\" ==> renderScene\r\n                       \"navigationState\" ==> navigationState],\r\n            props), [])\r\n\r\nlet navigationContainer (props:NavigationContainerProps list) : React.ReactElement =\r\n    createElement(\r\n      RN.NavigationContainer,\r\n      props, [])\r\n\r\nlet navigationRootContainer (props:NavigationRootContainerProps list) : React.ReactElement =\r\n    createElement(\r\n      RN.NavigationRootContainer,\r\n      props, [])\r\n\r\nlet navigationBar (props:NavigationBarProperties list) : React.ReactElement =\r\n    createElement(\r\n      NavigatorStatic.Globals.NavigationBar,\r\n      props, [])\r\n\r\nlet breadcrumbNavigationBar (props:IBreadcrumbNavigationBarProperties list) : React.ReactElement =\r\n    createElement(\r\n      NavigatorStatic.Globals.BreadcrumbNavigationBar,\r\n      props, [])\r\n\r\nlet emptyDataSource<'a>() : ListViewDataSource<'a> =\r\n    RN.ListView.DataSource.Create(\r\n        unbox(createObj [\"rowHasChanged\" ==> fun r1 r2 -> r1 <> r2])\r\n    ) |> unbox\r\n\r\nlet newDataSource<'a> (elements:'a []) =\r\n    emptyDataSource<'a>().cloneWithRows(unbox elements)\r\n\r\nlet updateDataSource<'a> (data:'a []) (dataSource : ListViewDataSource<'a>) : ListViewDataSource<'a> =\r\n    dataSource.cloneWithRows (unbox data)\r\n\r\n// [<Emit(typeof<React.Emitter>, \"Com\")>]\r\n// let createComponent<'T,'P,'S when 'T :> React.Component<'P,'S>> (props: 'P) (children: React.ReactElement list): React.ReactElement = jsNative\r\n\r\n// [<Emit(typeof<React.Emitter>, \"Com\")>]\r\n// let createScene<'T,'P,'S when 'T :> React.Component<'P,'S>> (props: 'P) : React.ReactElement = jsNative\r\n\r\n[<Import(\"Buffer\",\"buffer\")>]\r\n[<Emit(\"$0.from($1).toString($2)\")>]\r\nlet encode (text: string, encoding:string) : string = jsNative\r\n\r\nlet encodeBase64 (text: string) : string = encode(text,\"base64\")\r\nlet encodeAscii (text: string) : string = encode(text,\"ascii\")\r\n\r\n[<Import(\"BackAndroid\",\"react-native\")>]\r\nlet private BackAndroid = obj()\r\n\r\nlet removeOnHardwareBackPressHandler (onHardwareBackPress: unit -> bool): unit =\r\n    BackAndroid?removeEventListener(\"hardwareBackPress\", onHardwareBackPress) |> ignore\r\n\r\nlet setOnHardwareBackPressHandler (onHardwareBackPress: unit -> bool): unit =\r\n    BackAndroid?addEventListener(\"hardwareBackPress\", onHardwareBackPress) |> ignore\r\n\r\nlet exitApp (): unit =\r\n    BackAndroid?exitApp() |> ignore\r\n\r\n[<Import(\"Linking\",\"react-native\")>]\r\nlet private Linking = obj()\r\n\r\n/// Opens the given URL\r\nlet openUrl (url:string) : unit =\r\n    Linking?openURL(url) |> ignore\r\n\r\n\r\nmodule Keyboard =\r\n    [<Import(\"Keyboard\",\"react-native\")>]\r\n    let private Keyboard = obj()\r\n\r\n    /// Dismisses the keyboard\r\n    let dismiss() : unit =\r\n        Keyboard?dismiss() |> ignore    \r\n\r\nmodule Alert =\r\n    [<Import(\"Alert\",\"react-native\")>]\r\n    let private Alert = obj()\r\n\r\n    let private createButton(label:string,callback:unit -> unit) =\r\n        createObj [\r\n            \"text\" ==> label\r\n            \"onPress\" ==> callback\r\n        ]\r\n\r\n    /// Shows an alert with many buttons\r\n    let alert (title:string,message:string,buttons: (string * (unit -> unit)) seq) : unit =\r\n        Alert?alert( title, message, Seq.map createButton buttons |> Seq.toArray ) |> ignore        \r\n\r\n    /// Shows an alert button with one button\r\n    let alertWithOneButton (title:string,message:string,okText:string,onOk:unit -> unit) : unit =\r\n        alert( title, message, [ okText,onOk ]) |> ignore\r\n\r\n    /// Shows an alert button with two buttons\r\n    let alertWithTwoButtons (title:string,message:string,cancelText:string,onCancel:unit -> unit,okText:string,onOk:unit -> unit) : unit =\r\n        alert( title, message, [ (cancelText,onCancel); (okText,onOk) ]) |> ignore\r\n\r\n    let confirm (title:string,message:string,cancelText:string,okText:string) =\r\n        Promise.create(fun onSuccess onError ->\r\n            let onError() = onError(new Exception(\"Cancelled\"))\r\n            alertWithTwoButtons (title,message,cancelText,onError,okText,onSuccess)\r\n        )\r\n\r\nmodule NetInfo =\r\n    [<Import(\"NetInfo\",\"react-native\")>]\r\n    let private NetInfo = obj()\r\n\r\n    open Fable.Import.JS\r\n    open Fable.Import.Browser\r\n\r\n    let getConnectionType() : Promise<string> =\r\n        NetInfo?fetch() |> unbox\r\n\r\n/// ImageStore contains functions which help to deal with image data on the device.\r\nmodule ImageStore =\r\n    [<Import(\"ImageStore\",\"react-native\")>]\r\n    let private ImageStore = obj()\r\n\r\n    /// Retrieves the base64-encoded data for an image in the ImageStore. If the specified URI does not match an image in the store, an exception will be raised.\r\n    let getBase64ForTag uri : JS.Promise<string> =\r\n        Promise.create(fun onSuccess onError ->\r\n            ImageStore?getBase64ForTag(uri, onSuccess, onError) |> ignore\r\n        )\r\n\r\n    /// Stores a base64-encoded image in the ImageStore, and returns a URI that can be used to access or display the image later.\r\n    /// Images are stored in memory only, and must be manually deleted when you are finished with them by calling removeImageForTag().\r\n    let addImageFromBase64 imageData : JS.Promise<string> =\r\n        Promise.create(fun onSuccess onError ->\r\n            ImageStore?addImageFromBase64(imageData, onSuccess, onError) |> ignore\r\n        )\r\n\r\nmodule Toast =\r\n    [<Import(\"ToastAndroid\",\"react-native\")>]\r\n    let private Toast = obj()\r\n\r\n    /// Shows a toast with short duration\r\n    let showShort (message:string) : unit =\r\n        Toast?show(message,Toast?SHORT) |> unbox\r\n\r\n    /// Shows a toast with long duration\r\n    let showLong (message:string) : unit =\r\n        Toast?show(message,Toast?LONG) |> unbox\r\n\r\nmodule Storage =\r\n    open Fable.Core.JsInterop\r\n\r\n    /// Loads a value as string with the given key from the local device storage.\r\n    /// Returns None if the key is not found.\r\n    let getItem (key:string) : JS.Promise<string option> =\r\n        Globals.AsyncStorage.getItem key\r\n        |> Promise.map (function\r\n            | null -> Option.None\r\n            | v -> Some v)\r\n\r\n    /// Loads a value with the given key from the local device storage.\r\n    /// Returns None if the key is not found.\r\n    let [<PassGenerics>] load<'a> (key:string) : JS.Promise<'a option> =\r\n        Globals.AsyncStorage.getItem key\r\n        |> Promise.map (function\r\n            | null -> Option.None\r\n            | v -> Some (ofJson v))\r\n\r\n    /// Saves a value with the given key to the local device storage.\r\n    let setItem (k:string) (v:string): JS.Promise<unit> =\r\n        unbox(Globals.AsyncStorage.setItem(k,v))\r\n\r\n    /// Saves a value with the given key to the local device storage.\r\n    let [<PassGenerics>] save<'a> (k:string) (v:'a): JS.Promise<unit> =\r\n        unbox(Globals.AsyncStorage.setItem(k, toJson v))\r\n\r\n"]}