(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "react", "react-native-popup-menu"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("react"), require("react-native-popup-menu"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.react, global.reactNativePopupMenu);
        global.FableHelpersReactNativePopupMenu = mod.exports;
    }
})(this, function (exports, _react, _reactNativePopupMenu) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.menuContext = menuContext;
    exports.menu = menu;
    exports.menuTrigger = menuTrigger;
    exports.menuOptions = menuOptions;
    exports.menuOption = menuOption;

    var _reactNativePopupMenu2 = _interopRequireDefault(_reactNativePopupMenu);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    function menuContext(props, onBackdropPress, children) {
        return _react.createElement.apply(undefined, [_reactNativePopupMenu.MenuContext, Object.assign({
            onBackdropPress: onBackdropPress
        }, props)].concat(_toConsumableArray(children)));
    }

    function menu(props, onSelect, children) {
        return _react.createElement.apply(undefined, [_reactNativePopupMenu2.default, Object.assign({
            onSelect: onSelect
        }, props)].concat(_toConsumableArray(children)));
    }

    function menuTrigger(props, onPress, children) {
        return _react.createElement.apply(undefined, [_reactNativePopupMenu.MenuTrigger, Object.assign({
            onPress: onPress
        }, props)].concat(_toConsumableArray(children)));
    }

    function menuOptions(props, children) {
        return _react.createElement.apply(undefined, [_reactNativePopupMenu.MenuOptions, props].concat(_toConsumableArray(children)));
    }

    function menuOption(props) {
        return (0, _react.createElement)(_reactNativePopupMenu.MenuOption, props);
    }
});
//# sourceMappingURL=Fable.Helpers.ReactNativePopupMenu.js.map