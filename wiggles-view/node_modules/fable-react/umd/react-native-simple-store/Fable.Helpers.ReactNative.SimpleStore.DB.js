(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "fable-core/umd/Reflection", "fable-core/umd/Serialize", "react-native", "fable-core/umd/Util", "fable-core/umd/Seq"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("fable-core/umd/Reflection"), require("fable-core/umd/Serialize"), require("react-native"), require("fable-core/umd/Util"), require("fable-core/umd/Seq"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Reflection, global.Serialize, global.reactNative, global.Util, global.Seq);
        global.FableHelpersReactNativeSimpleStoreDB = mod.exports;
    }
})(this, function (exports, _Reflection, _Serialize, _reactNative, _Util, _Seq) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.delete = undefined;
    exports.clear = clear;
    exports.add = add;
    exports.update = update;
    exports.updateMultiple = updateMultiple;
    exports.updateWithFunction = updateWithFunction;
    exports.updateWithFunctionAndKey = updateWithFunctionAndKey;
    exports.addMultiple = addMultiple;
    exports.replaceWithKey = replaceWithKey;
    exports.replace = replace;
    exports.get = get;
    exports.getAll = getAll;
    exports.getAllWithKey = getAllWithKey;
    exports.count = count;
    var modelsKey = "models/";

    function clear(_genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        var s = (0, _Serialize.toJsonWithTypeInfo)([]);
        return _reactNative.AsyncStorage.setItem(key, s);
    }

    function getModel(key, _genArgs) {
        return _reactNative.AsyncStorage.getItem(key).then(function (_arg1) {
            if (_arg1 == null) {
                return [];
            } else {
                return (0, _Serialize.ofJsonWithTypeInfo)(_arg1, {
                    T: (0, _Util.Array)(_genArgs.a)
                });
            }
        });
    }

    function add(data, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            var newModel = (0, _Serialize.toJsonWithTypeInfo)([data].concat(model));
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    function update(index, data, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            model[index] = data;
            var newModel = (0, _Serialize.toJsonWithTypeInfo)(model);
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    function _delete(index, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            var model_1 = Array.from((0, _Seq.mapIndexed)(function (i, x) {
                return [i, x];
            }, model)).filter(function (tupledArg) {
                return tupledArg[0] !== index;
            }).map(function (tuple) {
                return tuple[1];
            });
            var newModel = (0, _Serialize.toJsonWithTypeInfo)(model_1);
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    exports.delete = _delete;

    function updateMultiple(values, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var forLoopVar = _step.value;
                    model[forLoopVar[0]] = forLoopVar[1];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var newModel = (0, _Serialize.toJsonWithTypeInfo)(model);
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    function updateWithFunction(updateF, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            var updated = updateF(model);
            var newModel = (0, _Serialize.toJsonWithTypeInfo)(updated);
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    function updateWithFunctionAndKey(updateF, key, _genArgs) {
        var key_1 = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a) + "/" + key;
        return getModel(key_1, {
            a: _genArgs.a
        }).then(function (model) {
            var updated = updateF(model);
            var newModel = (0, _Serialize.toJsonWithTypeInfo)(updated);
            return _reactNative.AsyncStorage.setItem(key_1, newModel);
        });
    }

    function addMultiple(data, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            var newModel = (0, _Serialize.toJsonWithTypeInfo)(data.concat(model));
            return _reactNative.AsyncStorage.setItem(key, newModel);
        });
    }

    function replaceWithKey(key, data, _genArgs) {
        var modelKey = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a) + "/" + key;
        var newModel = (0, _Serialize.toJsonWithTypeInfo)(data);
        return _reactNative.AsyncStorage.setItem(modelKey, newModel);
    }

    function replace(data, _genArgs) {
        var modelKey = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        var newModel = (0, _Serialize.toJsonWithTypeInfo)(data);
        return _reactNative.AsyncStorage.setItem(modelKey, newModel);
    }

    function get(index, _genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            return model[index];
        });
    }

    function getAll(_genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        });
    }

    function getAllWithKey(key, _genArgs) {
        var key_1 = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a) + "/" + key;
        return getModel(key_1, {
            a: _genArgs.a
        });
    }

    function count(_genArgs) {
        var key = "models/" + (0, _Reflection.getTypeFullName)(_genArgs.a);
        return getModel(key, {
            a: _genArgs.a
        }).then(function (model) {
            return model.length;
        });
    }
});
//# sourceMappingURL=Fable.Helpers.ReactNative.SimpleStore.DB.js.map