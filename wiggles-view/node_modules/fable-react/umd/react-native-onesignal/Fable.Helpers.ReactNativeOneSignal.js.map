{"version":3,"sources":["..\\..\\..\\src\\react-native-onesignal\\Fable.Helpers.ReactNativeOneSignal.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BO;AAGC,8CACA;AAAA;AAAgE,SADhE;;AAQA,oFACA;AAAA;AAAkF,SADlF;;AAOA,sFACA;AAAA;AAAmF,SADnF;;AAMA,sFACA;AAAA;AAAmF,SADnF;;AAMA,wFACA;AAAA;AAAoF,SADpF;;AAOA,kDACA;AAAA;AAAiE,SADjE;;AAOA,oDACA;AAAA;AAAkE,SADlE;;AAOA,sDACA;AAAA;AAAmE,SADnE;;AAOA,wDACA;AAAA;AAAoE,SADpE;;AAIA,kEACA;AAAA;AAAqE,SADrE;;AAIA,oEACA;AAAA;AAAsE,SADtE;;AAMA,wDACA;AAAA;AAAuD,SADvD;;AAIA,kFACA;AAAA;AAAoE,SADpE;;AAKA,gEACA;AAAA;AAAsE,SADtE;;AAMA,kEACA;AAAA;AAAyG,SADzG;;AAvFD;AAuFoB,KAvFpB","file":"Fable.Helpers.ReactNativeOneSignal.js","sourcesContent":["/// Contains functions for push notifications via OneSignal.\r\nmodule Fable.Helpers.ReactNativeOneSignal\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Import\r\nopen Fable.Import.ReactNativeOneSignal\r\n\r\nopen Fable.Core.JsInterop\r\n\r\n/// Contains properties for push notifications via OneSignal.\r\nmodule Props =\r\n\r\n    [<KeyValueList>]\r\n    type IOneSignalOptions =\r\n        interface end\r\n\r\n    [<KeyValueList>]\r\n    type OneSignalOptions =\r\n    | OnIdsAvailable of (OneSignalID -> unit)\r\n    | OnNotificationOpened of Func<string,OneSignalNotificationData,bool,unit>\r\n        interface IOneSignalOptions\r\n\r\nopen Props\r\n\r\n/// Contains functions for push notifications via OneSignal.\r\nmodule OneSignal =\r\n\r\n    /// Configures the push notification system.\r\n    let configure (props: IOneSignalOptions list) =\r\n        ReactNativeOneSignal.Globals.OneSignal?configure(props |> unbox) |> ignore\r\n\r\n\r\n    /// Enables In-App alert notifications.\r\n    /// By default this is false and notifications will not be shown when the user is in the app, instead the OneSignalHandleNotificationBlock is fired.\r\n    /// If activated notifications will be shown as native alert boxes if a notification is received when the user is in your app.\r\n    /// The OneSignalHandleNotificationBlock is then fired after the alert box is closed.\r\n    let enableInAppAlertNotification () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableInAppAlertNotification(true |> unbox) |> ignore\r\n\r\n    /// Disables In-App alert notifications.\r\n    /// By default this is false and notifications will not be shown when the user is in the app, instead the OneSignalHandleNotificationBlock is fired.\r\n    /// If activated notifications will be shown as native alert boxes if a notification is received when the user is in your app.\r\n    /// The OneSignalHandleNotificationBlock is then fired after the alert box is closed.\r\n    let disableInAppAlertNotification () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableInAppAlertNotification(false |> unbox) |> ignore\r\n\r\n    /// Enables notifications when App is active.\r\n    /// By default this is false and notifications will not be shown when the user is in your app, instead the NotificationOpenedHandler is fired.\r\n    /// If activated notifications will always show in the notification area and NotificationOpenedHandler will not fire until the user taps on the notification.\r\n    let enableNotificationsWhenActive () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableNotificationsWhenActive(true |> unbox) |> ignore\r\n\r\n    /// Disables notifications when App is active.\r\n    /// By default this is false and notifications will not be shown when the user is in your app, instead the NotificationOpenedHandler is fired.\r\n    /// If activated notifications will always show in the notification area and NotificationOpenedHandler will not fire until the user taps on the notification.\r\n    let disableNotificationsWhenActive () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableNotificationsWhenActive(false |> unbox) |> ignore\r\n\r\n    /// Enables sound.\r\n    /// You can call this from your UI from a button press for example to give your user's options for your notifications.\r\n    /// By default OneSignal plays the system's default notification sound when the device's notification system volume is turned on.\r\n    /// Disabling sounds means that the device will only vibrate unless the device is set to a total silent mode.\r\n    let enableSound () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableSound(true |> unbox) |> ignore\r\n\r\n    /// Disables sound.\r\n    /// You can call this from your UI from a button press for example to give your user's options for your notifications.\r\n    /// By default OneSignal plays the system's default notification sound when the device's notification system volume is turned on.\r\n    /// Disabling sounds means that the device will only vibrate unless the device is set to a total silent mode.\r\n    let disableSound () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableSound(false |> unbox) |> ignore\r\n\r\n    /// Enables vibration.\r\n    /// You can call this from your UI from a button press for example to give your user's options for your notifications.\r\n    /// By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.\r\n    /// Disabling vinrations means that the device will only vibrate lightly when the device is in it's vibrate only mode.\r\n    let enableVibrate () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableVibrate(true |> unbox) |> ignore\r\n\r\n    /// Disables vibration.\r\n    /// You can call this from your UI from a button press for example to give your user's options for your notifications.\r\n    /// By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.\r\n    /// Disabling vinrations means that the device will only vibrate lightly when the device is in it's vibrate only mode.\r\n    let disableVibrate () =\r\n        ReactNativeOneSignal.Globals.OneSignal?enableVibrate(false |> unbox) |> ignore\r\n\r\n    /// Enables subscriptions.\r\n    let enableSubscriptions () =\r\n        ReactNativeOneSignal.Globals.OneSignal?setSubscription(true |> unbox) |> ignore\r\n\r\n    /// Disables subscriptions.\r\n    let disableSubscriptions () =\r\n        ReactNativeOneSignal.Globals.OneSignal?setSubscription(false |> unbox) |> ignore\r\n\r\n    /// Prompts the user for location permissions. (Android Only)\r\n    /// This allows for geotagging so you can send notifications to users based on location.\r\n    /// Note: Make sure you also have the required location permission in your AndroidManifest.xml.\r\n    let promptLocation () =\r\n        ReactNativeOneSignal.Globals.OneSignal?promptLocation() |> ignore\r\n\r\n    /// Removes all OneSignal notifications from the Notification Shade. (Android Only)\r\n    let clearOneSignalNotifications () =\r\n        ReactNativeOneSignal.Globals.OneSignal?clearOneSignalNotifications() |> ignore\r\n\r\n    /// Cancels a single OneSignal notification based on its Android notification integer id. (Android Only)\r\n    /// You can get the notification Id when invoking OneSignal.onNotificationOpened while receiving a notification.\r\n    let cancelNotification (id:string) =\r\n        ReactNativeOneSignal.Globals.OneSignal?cancelNotification(id |> unbox) |> ignore\r\n\r\n\r\n    /// Post Peer-to-Peer-Notfication.\r\n    /// Allows you to send notifications from user to user or schedule ones in the future to be delivered to the current device.\r\n    let postP2PNotification(message, data, userId: string) : unit =\r\n        ReactNativeOneSignal.Globals.OneSignal?postNotification(message |> unbox, data |> unbox, userId |> unbox) |> ignore"]}