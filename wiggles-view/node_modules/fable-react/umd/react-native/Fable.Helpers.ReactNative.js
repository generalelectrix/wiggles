(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "fable-core/umd/Symbol", "fable-core/umd/Util", "react", "react-native", "buffer", "fable-core/umd/Seq", "fable-core/umd/List", "fable-core/umd/Serialize"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("fable-core/umd/Symbol"), require("fable-core/umd/Util"), require("react"), require("react-native"), require("buffer"), require("fable-core/umd/Seq"), require("fable-core/umd/List"), require("fable-core/umd/Serialize"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Symbol, global.Util, global.react, global.reactNative, global.buffer, global.Seq, global.List, global.Serialize);
        global.FableHelpersReactNative = mod.exports;
    }
})(this, function (exports, _Symbol2, _Util, _react, _reactNative, _buffer, _Seq, _List, _Serialize) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Storage = exports.Toast = exports.ImageStore = exports.NetInfo = exports.Alert = exports.Keyboard = exports.switch = exports.Props = undefined;
    exports.text = text;
    exports.textInput = textInput;
    exports.createToolbarAction = createToolbarAction;
    exports.createToolbarActionWithIcon = createToolbarActionWithIcon;
    exports.toolbarAndroid = toolbarAndroid;
    exports.keyboardAvoidingView = keyboardAvoidingView;
    exports.view = view;
    exports.webView = webView;
    exports.segmentedControlIOS = segmentedControlIOS;
    exports.activityIndicator = activityIndicator;
    exports.activityIndicatorIOS = activityIndicatorIOS;
    exports.datePickerIOS = datePickerIOS;
    exports.drawerLayoutAndroid = drawerLayoutAndroid;
    exports.pickerIOSItem = pickerIOSItem;
    exports.pickerItem = pickerItem;
    exports.picker = picker;
    exports.pickerIOS = pickerIOS;
    exports.progressBarAndroid = progressBarAndroid;
    exports.progressViewIOS = progressViewIOS;
    exports.refreshControl = refreshControl;
    exports.slider = slider;
    exports.sliderIOS = sliderIOS;
    exports.switchIOS = switchIOS;
    exports.image = image;
    exports.imageWithChild = imageWithChild;
    exports.listView = listView;
    exports.mapView = mapView;
    exports.modal = modal;
    exports.touchableWithoutFeedback = touchableWithoutFeedback;
    exports.touchableHighlight = touchableHighlight;
    exports.touchableHighlightWithChild = touchableHighlightWithChild;
    exports.touchableOpacity = touchableOpacity;
    exports.touchableNativeFeedback = touchableNativeFeedback;
    exports.viewPagerAndroid = viewPagerAndroid;
    exports.navigator = navigator;
    exports.styleSheet = styleSheet;
    exports.tabBarItem = tabBarItem;
    exports.tabBarIOS = tabBarIOS;
    exports.scrollView = scrollView;
    exports.swipeableListView = swipeableListView;
    exports.statusBar = statusBar;
    exports.navigationHeader = navigationHeader;
    exports.navigationState = navigationState;
    exports.navigationRoute = navigationRoute;
    exports.navigationCardStack = navigationCardStack;
    exports.navigationContainer = navigationContainer;
    exports.navigationRootContainer = navigationRootContainer;
    exports.navigationBar = navigationBar;
    exports.breadcrumbNavigationBar = breadcrumbNavigationBar;
    exports.emptyDataSource = emptyDataSource;
    exports.newDataSource = newDataSource;
    exports.updateDataSource = updateDataSource;
    exports.encodeBase64 = encodeBase64;
    exports.encodeAscii = encodeAscii;
    exports.removeOnHardwareBackPressHandler = removeOnHardwareBackPressHandler;
    exports.setOnHardwareBackPressHandler = setOnHardwareBackPressHandler;
    exports.exitApp = exitApp;
    exports.openUrl = openUrl;

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var Props = exports.Props = function (__exports) {
        var ViewPropertiesIOS = __exports.ViewPropertiesIOS = function () {
            function ViewPropertiesIOS(caseName, fields) {
                _classCallCheck(this, ViewPropertiesIOS);

                this.Case = caseName;
                this.Fields = fields;
            }

            _createClass(ViewPropertiesIOS, [{
                key: _Symbol3.default.reflection,
                value: function () {
                    return {
                        type: "Fable.Helpers.ReactNative.Props.ViewPropertiesIOS",
                        interfaces: ["FSharpUnion", "System.IEquatable", "Fable.Helpers.ReactNative.Props.IViewPropertiesIOS"],
                        cases: {
                            AccessibilityTraits: [_Util.Any],
                            ShouldRasterizeIOS: ["boolean"]
                        }
                    };
                }
            }, {
                key: "Equals",
                value: function (other) {
                    return (0, _Util.equalsUnions)(this, other);
                }
            }]);

            return ViewPropertiesIOS;
        }();

        (0, _Symbol2.setType)("Fable.Helpers.ReactNative.Props.ViewPropertiesIOS", ViewPropertiesIOS);

        var ViewPropertiesAndroid = __exports.ViewPropertiesAndroid = function () {
            function ViewPropertiesAndroid(caseName, fields) {
                _classCallCheck(this, ViewPropertiesAndroid);

                this.Case = caseName;
                this.Fields = fields;
            }

            _createClass(ViewPropertiesAndroid, [{
                key: _Symbol3.default.reflection,
                value: function () {
                    return {
                        type: "Fable.Helpers.ReactNative.Props.ViewPropertiesAndroid",
                        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable", "Fable.Helpers.ReactNative.Props.IViewPropertiesAndroid"],
                        cases: {
                            AccessibilityComponentType: ["string"],
                            AccessibilityLiveRegion: ["string"],
                            Collapsable: ["boolean"],
                            ImportantForAccessibility: ["string"],
                            NeedsOffscreenAlphaCompositing: ["boolean"],
                            RenderToHardwareTextureAndroid: ["boolean"]
                        }
                    };
                }
            }, {
                key: "Equals",
                value: function (other) {
                    return (0, _Util.equalsUnions)(this, other);
                }
            }, {
                key: "CompareTo",
                value: function (other) {
                    return (0, _Util.compareUnions)(this, other);
                }
            }]);

            return ViewPropertiesAndroid;
        }();

        (0, _Symbol2.setType)("Fable.Helpers.ReactNative.Props.ViewPropertiesAndroid", ViewPropertiesAndroid);

        var MapViewRegion = __exports.MapViewRegion = function () {
            function MapViewRegion(caseName, fields) {
                _classCallCheck(this, MapViewRegion);

                this.Case = caseName;
                this.Fields = fields;
            }

            _createClass(MapViewRegion, [{
                key: _Symbol3.default.reflection,
                value: function () {
                    return {
                        type: "Fable.Helpers.ReactNative.Props.MapViewRegion",
                        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                        cases: {
                            Latitude: ["number"],
                            LatitudeDelta: ["number"],
                            Longitude: ["number"],
                            LongitudeDelta: ["number"]
                        }
                    };
                }
            }, {
                key: "Equals",
                value: function (other) {
                    return (0, _Util.equalsUnions)(this, other);
                }
            }, {
                key: "CompareTo",
                value: function (other) {
                    return (0, _Util.compareUnions)(this, other);
                }
            }]);

            return MapViewRegion;
        }();

        (0, _Symbol2.setType)("Fable.Helpers.ReactNative.Props.MapViewRegion", MapViewRegion);
        return __exports;
    }({});

    function text(props, text_1) {
        return (0, _react.createElement)(_reactNative.Text, props, text_1);
    }

    function textInput(props, text_1) {
        return (0, _react.createElement)(_reactNative.TextInput, props, text_1);
    }

    function createToolbarAction(title, showStatus) {
        return {
            title: title,
            show: showStatus
        };
    }

    function createToolbarActionWithIcon(title, icon, showStatus) {
        return {
            title: title,
            icon: icon,
            show: showStatus
        };
    }

    function toolbarAndroid(props, onActionSelected) {
        return (0, _react.createElement)(_reactNative.ToolbarAndroid, Object.assign({
            onActionSelected: onActionSelected
        }, props));
    }

    function keyboardAvoidingView(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.KeyboardAvoidingView, props].concat(_toConsumableArray(children)));
    }

    function view(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.View, props].concat(_toConsumableArray(children)));
    }

    function webView(props) {
        return (0, _react.createElement)(_reactNative.WebView, props);
    }

    function segmentedControlIOS(props) {
        return (0, _react.createElement)(_reactNative.SegmentedControlIOS, props);
    }

    function activityIndicator(props) {
        return (0, _react.createElement)(_reactNative.ActivityIndicator, props);
    }

    function activityIndicatorIOS(props) {
        return (0, _react.createElement)(_reactNative.ActivityIndicatorIOS, props);
    }

    function datePickerIOS(props) {
        return (0, _react.createElement)(_reactNative.DatePickerIOS, props);
    }

    function drawerLayoutAndroid(props, renderNavigationView, children) {
        return _react.createElement.apply(undefined, [_reactNative.DrawerLayoutAndroid, Object.assign({
            renderNavigationView: renderNavigationView
        }, props)].concat(_toConsumableArray(children)));
    }

    function pickerIOSItem(props) {
        return (0, _react.createElement)(_reactNative.PickerIOS.Item, props);
    }

    function pickerItem(props) {
        return (0, _react.createElement)(_reactNative.Picker.Item, props);
    }

    function picker(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.Picker, props].concat(_toConsumableArray(children)));
    }

    function pickerIOS(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.PickerIOS, props].concat(_toConsumableArray(children)));
    }

    function progressBarAndroid(props) {
        return (0, _react.createElement)(_reactNative.ProgressBarAndroid, props);
    }

    function progressViewIOS(props) {
        return (0, _react.createElement)(_reactNative.ProgressViewIOS, props);
    }

    function refreshControl(props) {
        return (0, _react.createElement)(_reactNative.RefreshControl, props);
    }

    function slider(props) {
        return (0, _react.createElement)(_reactNative.Slider, props);
    }

    function sliderIOS(props) {
        return (0, _react.createElement)(_reactNative.SliderIOS, props);
    }

    function switchIOS(props) {
        return (0, _react.createElement)(_reactNative.SwitchIOS, props);
    }

    function image(props) {
        return (0, _react.createElement)(_reactNative.Image, props);
    }

    function imageWithChild(props, child) {
        return (0, _react.createElement)(_reactNative.Image, props, child);
    }

    function listView(dataSource, props) {
        return (0, _react.createElement)(_reactNative.ListView, Object.assign({
            dataSource: dataSource
        }, props));
    }

    function mapView(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.MapView, props].concat(_toConsumableArray(children)));
    }

    function modal(props) {
        return (0, _react.createElement)(_reactNative.Modal, props);
    }

    function touchableWithoutFeedback(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.TouchableWithoutFeedback, props].concat(_toConsumableArray(children)));
    }

    function touchableHighlight(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.TouchableHighlight, props].concat(_toConsumableArray(children)));
    }

    function touchableHighlightWithChild(props, child) {
        return (0, _react.createElement)(_reactNative.TouchableHighlight, props, child);
    }

    function touchableOpacity(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.TouchableOpacity, props].concat(_toConsumableArray(children)));
    }

    function touchableNativeFeedback(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.TouchableNativeFeedback, props].concat(_toConsumableArray(children)));
    }

    function viewPagerAndroid(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.ViewPagerAndroid, props].concat(_toConsumableArray(children)));
    }

    function navigator(props) {
        return (0, _react.createElement)(_reactNative.Navigator, props);
    }

    function styleSheet(props) {
        return (0, _react.createElement)(_reactNative.StyleSheet, props);
    }

    function tabBarItem(props) {
        return (0, _react.createElement)(_reactNative.TabBarIOS.Item, props);
    }

    function tabBarIOS(props) {
        return (0, _react.createElement)(_reactNative.TabBarIOS, props);
    }

    function scrollView(props, children) {
        return _react.createElement.apply(undefined, [_reactNative.ScrollView, props].concat(_toConsumableArray(children)));
    }

    function swipeableListView(props) {
        return (0, _react.createElement)(_reactNative.SwipeableListView, props);
    }

    function statusBar(props) {
        return (0, _react.createElement)(_reactNative.StatusBar, props);
    }

    function _switch(props, onValueChange, value) {
        return (0, _react.createElement)(_reactNative.Switch, Object.assign({
            onValueChange: onValueChange,
            value: value
        }, props));
    }

    exports.switch = _switch;

    function navigationHeader(props, rendererProps) {
        return (0, _react.createElement)(_reactNative.NavigationExperimental.Header, Object.assign(props, rendererProps));
    }

    function navigationState(index, routes) {
        return {
            index: index,
            routes: Array.from(routes)
        };
    }

    function navigationRoute(key, title) {
        return {
            key: key,
            title: title
        };
    }

    function navigationCardStack(navigationState_1, renderScene, props) {
        return (0, _react.createElement)(_reactNative.NavigationExperimental.CardStack, Object.assign({
            renderScene: renderScene,
            navigationState: navigationState_1
        }, props));
    }

    function navigationContainer(props) {
        return (0, _react.createElement)(_reactNative.NavigationContainer, props);
    }

    function navigationRootContainer(props) {
        return (0, _react.createElement)(_reactNative.NavigationRootContainer, props);
    }

    function navigationBar(props) {
        return (0, _react.createElement)(_reactNative.NavigatorStatic.NavigationBar, props);
    }

    function breadcrumbNavigationBar(props) {
        return (0, _react.createElement)(_reactNative.NavigatorStatic.BreadcrumbNavigationBar, props);
    }

    function emptyDataSource() {
        return new _reactNative.ListView.DataSource({
            rowHasChanged: function rowHasChanged(r1, r2) {
                return r1 !== r2;
            }
        });
    }

    function newDataSource(elements) {
        return emptyDataSource().cloneWithRows(elements);
    }

    function updateDataSource(data, dataSource) {
        return dataSource.cloneWithRows(data);
    }

    function encodeBase64(text_1) {
        return _buffer.Buffer.from(text_1).toString("base64");
    }

    function encodeAscii(text_1) {
        return _buffer.Buffer.from(text_1).toString("ascii");
    }

    function removeOnHardwareBackPressHandler(onHardwareBackPress) {
        _reactNative.BackAndroid.removeEventListener("hardwareBackPress", onHardwareBackPress);
    }

    function setOnHardwareBackPressHandler(onHardwareBackPress) {
        _reactNative.BackAndroid.addEventListener("hardwareBackPress", onHardwareBackPress);
    }

    function exitApp() {
        _reactNative.BackAndroid.exitApp(null);
    }

    function openUrl(url) {
        _reactNative.Linking.openURL(url);
    }

    var Keyboard = exports.Keyboard = function (__exports) {
        var dismiss = __exports.dismiss = function () {
            _reactNative.Keyboard.dismiss(null);
        };

        return __exports;
    }({});

    var Alert = exports.Alert = function (__exports) {
        var createButton = function createButton(label, callback) {
            return {
                text: label,
                onPress: callback
            };
        };

        var alert = __exports.alert = function (title, message, buttons) {
            _reactNative.Alert.alert(title, message, Array.from((0, _Seq.map)(function (tupledArg) {
                return createButton(tupledArg[0], tupledArg[1]);
            }, buttons)));
        };

        var alertWithOneButton = __exports.alertWithOneButton = function (title, message, okText, onOk) {
            alert(title, message, (0, _List.ofArray)([[okText, onOk]]));
        };

        var alertWithTwoButtons = __exports.alertWithTwoButtons = function (title, message, cancelText, onCancel, okText, onOk) {
            alert(title, message, (0, _List.ofArray)([[cancelText, onCancel], [okText, onOk]]));
        };

        var confirm = __exports.confirm = function (title, message, cancelText, okText) {
            return new Promise(function (onSuccess, onError) {
                var onError_1 = function onError_1() {
                    onError(new Error("Cancelled"));
                };

                alertWithTwoButtons(title, message, cancelText, onError_1, okText, onSuccess);
            });
        };

        return __exports;
    }({});

    var NetInfo = exports.NetInfo = function (__exports) {
        var getConnectionType = __exports.getConnectionType = function () {
            return _reactNative.NetInfo.fetch(null);
        };

        return __exports;
    }({});

    var ImageStore = exports.ImageStore = function (__exports) {
        var getBase64ForTag = __exports.getBase64ForTag = function (uri) {
            return new Promise(function (onSuccess, onError) {
                _reactNative.ImageStore.getBase64ForTag(uri, onSuccess, onError);
            });
        };

        var addImageFromBase64 = __exports.addImageFromBase64 = function (imageData) {
            return new Promise(function (onSuccess, onError) {
                _reactNative.ImageStore.addImageFromBase64(imageData, onSuccess, onError);
            });
        };

        return __exports;
    }({});

    var Toast = exports.Toast = function (__exports) {
        var showShort = __exports.showShort = function (message) {
            _reactNative.ToastAndroid.show(message, _reactNative.ToastAndroid.SHORT);
        };

        var showLong = __exports.showLong = function (message) {
            _reactNative.ToastAndroid.show(message, _reactNative.ToastAndroid.LONG);
        };

        return __exports;
    }({});

    var Storage = exports.Storage = function (__exports) {
        var getItem = __exports.getItem = function (key) {
            return _reactNative.AsyncStorage.getItem(key).then(function (_arg1) {
                if (_arg1 == null) {
                    return null;
                } else {
                    return _arg1;
                }
            });
        };

        var load = __exports.load = function (key, _genArgs) {
            return _reactNative.AsyncStorage.getItem(key).then(function (_arg1) {
                if (_arg1 == null) {
                    return null;
                } else {
                    return (0, _Serialize.ofJson)(_arg1, {
                        T: _genArgs.a
                    });
                }
            });
        };

        var setItem = __exports.setItem = function (k, v) {
            return _reactNative.AsyncStorage.setItem(k, v);
        };

        var save = __exports.save = function (k, v, _genArgs) {
            return _reactNative.AsyncStorage.setItem(k, (0, _Serialize.toJson)(v));
        };

        return __exports;
    }({});
});
//# sourceMappingURL=Fable.Helpers.ReactNative.js.map